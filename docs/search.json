[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "filoRAnálisis de textos literarios con R",
    "section": "",
    "text": "La preparación representa el paso previo para convertir los textos en datos. En ese apartado, podrás encontrar cómo se han preparado los textos paso a paso."
  },
  {
    "objectID": "index.html#preparación-de-los-textos",
    "href": "index.html#preparación-de-los-textos",
    "title": "filoRAnálisis de textos literarios con R",
    "section": "",
    "text": "La preparación representa el paso previo para convertir los textos en datos. En ese apartado, podrás encontrar cómo se han preparado los textos paso a paso."
  },
  {
    "objectID": "index.html#la-regenta",
    "href": "index.html#la-regenta",
    "title": "filoRAnálisis de textos literarios con R",
    "section": "La Regenta",
    "text": "La Regenta\nEn el siguiente tópico, aplicamos un conjunto de técnicas de análisis y visualización de datos a la novela “La Regenta” de Leopoldo Alas Clarín."
  },
  {
    "objectID": "index.html#tres-sombreros-de-copa",
    "href": "index.html#tres-sombreros-de-copa",
    "title": "filoRAnálisis de textos literarios con R",
    "section": "Tres sombreros de copa",
    "text": "Tres sombreros de copa\nFinalmente, utilizamos la obra de teatro “Tres sombreros de copa” de Miguel Mihura como fuente para el empleo de técnicas de análisis de redes sociales en R a partir de textos literarios."
  },
  {
    "objectID": "prepa.html",
    "href": "prepa.html",
    "title": "PreparaciónPreparación de los textos en R",
    "section": "",
    "text": "El R permite diferentes tipos de análisis de datos aplicados a textos. Según las características de cada obra, podemos llevar a cabo un análisis de frecuencia de palabras, de sentimientos, emplear diccionarios (léxicos o glosarios) para identificar ciertos rasgos o atributos. También resulta posible jugar con su estructura, agregando los datos por párrafo, capítulo, personaje o cualquier otra características que lo permita.\nPara el presente curso, hemos seleccionado dos textos literarios: una novela y una obra de teatro. La novela es “La Regenta”, de Leopoldo Alas “Clarín” y la pieza de teatro “Tres sombreros de copa”, de Miguel Mihura. Ambas obras son clásicos de la literatura española y permiten comparar los resultados de los análisis de textos literarios. Además de por su alto valor literario, nos interesan en particular por sus diferencias estructurales y cómo nos permiten realizar distintos tipos de análisis.\nAunque ambas puedan ser objeto de la mayor parte de los análisis que introduciremos aquí, cada una de ellas nos permitirá aplicar distintas técnicas de modo más fructífero. Por ejemplo, en “La Regenta” nos interesará explorar la estructura de los capítulos, los temas que aparecen, sus principales personajes, la frecuencia de palabras y la red de palabras. En el caso de “Tres sombreros de copa”, nos interesará explorar la red de diálogos y medir las diferentes formas de centralidad o influencia de los personajes en la trama."
  },
  {
    "objectID": "prepa.html#introducción",
    "href": "prepa.html#introducción",
    "title": "PreparaciónPreparación de los textos en R",
    "section": "",
    "text": "El R permite diferentes tipos de análisis de datos aplicados a textos. Según las características de cada obra, podemos llevar a cabo un análisis de frecuencia de palabras, de sentimientos, emplear diccionarios (léxicos o glosarios) para identificar ciertos rasgos o atributos. También resulta posible jugar con su estructura, agregando los datos por párrafo, capítulo, personaje o cualquier otra características que lo permita.\nPara el presente curso, hemos seleccionado dos textos literarios: una novela y una obra de teatro. La novela es “La Regenta”, de Leopoldo Alas “Clarín” y la pieza de teatro “Tres sombreros de copa”, de Miguel Mihura. Ambas obras son clásicos de la literatura española y permiten comparar los resultados de los análisis de textos literarios. Además de por su alto valor literario, nos interesan en particular por sus diferencias estructurales y cómo nos permiten realizar distintos tipos de análisis.\nAunque ambas puedan ser objeto de la mayor parte de los análisis que introduciremos aquí, cada una de ellas nos permitirá aplicar distintas técnicas de modo más fructífero. Por ejemplo, en “La Regenta” nos interesará explorar la estructura de los capítulos, los temas que aparecen, sus principales personajes, la frecuencia de palabras y la red de palabras. En el caso de “Tres sombreros de copa”, nos interesará explorar la red de diálogos y medir las diferentes formas de centralidad o influencia de los personajes en la trama."
  },
  {
    "objectID": "prepa.html#la-regenta-párrafos-y-capítulos",
    "href": "prepa.html#la-regenta-párrafos-y-capítulos",
    "title": "PreparaciónPreparación de los textos en R",
    "section": "“La Regenta”: párrafos y capítulos",
    "text": "“La Regenta”: párrafos y capítulos\n\nEstructura de la base de datos\nLa novela “La Regenta” es una obra de Leopoldo Alas “Clarín” publicada en 1884. Como sabéis, se trata de una de las novelas más importantes de la literatura española y representa uno de los mejores ejemplares de la novela realista/naturalista del siglo XIX. Se conforma por 30 capítulos, divididos en dos tomos de 15 apartados cada uno.\nEl objetivo de esta presente sección consiste en preparar el texto de “La Regenta” para su análisis por medio de herramientas y técnicas estadísticas. De modo concreto, nos interesa organizar el texto en dos bases de datos. La primera organizada por párrafos y la segunda por capítulos. Cada una de ellas permitirá la aplicación de análisis con distinto nivel de detalle.\nLlamaremos aquí “base de datos” una tabla de datos con N filas y N columnas. Cada fila corresponderá a un párrafo o capítulo y cada columna a una variable que nos interese analizar. Tendremos, por lo tanto, dos unidades de agregación y sus correspondientes atributos: parte (título, prólogo o tomo), capítulo, párrafo (en su caso) y texto.\n\n\nMétodo de conversión de texto a datos\nResulta muy sencillo descargar la novela “La Regenta”. Podemos emplear el paquete gutenbergr para descargar el texto directamente en R y trabajar con él. Solo tenemos que añadir un paso más al trabajo: convertir la codificación de caracteres a “latin1” para evitar problemas con las tildes.\n\n\nCode\n# Abre la librería gutenbergr\n# para bajar el texto\nlibrary(gutenbergr)\n\n# Baja el texto de \"La Regenta\"\n# cuyo id es igual 17073\nre &lt;- gutenberg_download(gutenberg_id = 17073, \n                         verbose = FALSE)\n\n# Cambia la codificación de caracteres a\n# a latin1 para evitar problemas con las tildes\nEncoding(re$text) &lt;- \"latin1\"\n\n# Convierte el texto en un solo string\nre &lt;- paste0(re$text, \n             collapse = \"\\n\")\n\n\nCon ese sencillo primer paso, ya tenemos la novela en nuestro ordenador. No obstante, hacen falta algunos tratamientos adicionales para convertir el texto en una base de datos que se pueda emplear en comparaciones, análisis de redes de palabras, etc.\nLa etapa siguiente trata de eliminar los saltos de línea y recuperar la estructura de los párrafos. Para ello, empleamos una expresión regular que nos permita identificar los párrafos y corregir los saltos de línea al final de cada frase.\n\n\nCode\n# Carga el paquete stringi\n# que permite trabajar con expresiones regulares\n# y otras tareas de manipulación\n# de textos\nlibrary(stringi)\n\n# Corrige los párrafos para que no tengan\n# un salto de línea al final de cada frase\nrx &lt;- stri_replace_all_regex(\n            re,\n            \"(\\\\S|\\\\p{L})(\\n)(\\\\S{1}|\\\\p{L})\",\"$1 $3\")\n\n\nPara entender lo que hemos hecho, explicaremos la gramática de la expresión regular empleada:\n\n(\\\\S|\\\\p{L}): busca uno o más caracteres que no sean espacios en blanco (\\S) o (|) una letra con acentuación latina (\\p{L}).\n(\\n): busca un salto de línea.\n(\\\\S{1}|\\\\p{L}): busca un único carácter que no sea un espacio en blanco (\\S{1}) o (|) una letra con acentuación latina (\\p{L}).\n\ny los reemplaza por:\n\n$1 $3: por el primer carácter encontrado ($1), un espacio y el último carácter encontrado ($3).\n\nDe ese modo:\n“El poeta es un fingidor.”\n“Finge tan completamente”\n“que llega a fingir que es dolor”\n“el dolor que de verdad siente.”\nse convierte en:\n“El poeta es un fingidor. Finge tan completamente que llega a fingir que es dolor el dolor que de verdad siente.”\nDe ese modo, el R lo hace para TODOS los párrafos a la vez y nos ahora mucho trabajo de preparación de cualquier texto.\nUna vez corregidos los párrafos, podemos convertir el texto en un vector de líneas para poder trabajar con él.\n\n\nCode\n# Carga el paquete readr, que permite\n# convertir textos en vectores\nlibrary(readr)\n\n# Vuelve a seleccionar los párrafos\nre &lt;- read_lines(rx)\n\n\nEl resultado es un vector de caracteres llamado re con 12.164 elementos. Cada elemento corresponde o bien a un párrafo o bien a un salto de línea indicando la separación entre dos párrafos.\nCon esa información, nos interesa asociar cada párrafo a la estructura formal de la novela. En el caso de “La Regenta”, la novela está dividida en un prólogo, dos tomos y 30 capítulos, siendo los quince primeros pertenecientes al primer tomo y los quince restantes al segundo.\nPara llevar a cabo dicha tarea, debemos identificar los elementos que marcan el inicio de cada parte de la novela. En este caso, el prólogo, los tomos y los capítulos. El prólogo y los tomos son fácilmente identificables por su título. Basta con buscar en qué líneas aparecen las palabras “Prólogo” y “Tomo” para identificarlos.\nLos capítulos, por otra parte, exigen un poco más de trabajo. Se enumeran con números romanos precedidos y seguidos de dos guiones. Por ejemplo, “–I–” indica el punto en el que empieza primer capítulo. “–II–” encuentra el elemento que da inicio al segundo y así sucesivamente. En nuestro ejemplo, el primer capítulo empieza en la línea 59 y el segundo en la 311. Por lo tanto, sabemos que todos los párrafos comprendidos entre 59 y 310 corresponden al primer capítulo. Con esa información en mano, lo que tenemos que hacer es asociar a cada párrafo su correspondiente título, tomo o capítulo.\nEl primer procedimiento consiste en encontrar los índices de las partes y capítulos de la novela y sus descripciones:\n\n\nCode\n# Encuentra los índices del prólogo, de\n# los tomos y los capítulos\npro &lt;- grep(\"Prólogo\",re) # prólogo\ntm &lt;- c(grep(\"Tomo\",re), \n        grep(\"TOMO\",re)) # tomos - índice\ncap &lt;- which(stri_detect_regex(re, \n                            \"^(--)([A-Z]+)(--)$\")==TRUE) # capítulos\n\n# Crea vectores que obtienen\n# los títulos de los tomos y los capítulos\ntx &lt;- re[tm] # tomos - textos\ncx &lt;- re[cap] # capítulos - textos\n\n\nCon los índices, puedo repetir cada nombre de tomo, capítulo, prólogo, etc. en función de cuántos párrafos tenga cada uno. De ese modo, puedo asociar cada párrafo a su correspondiente título, tomo o capítulo:\n\n\nCode\n# Genera un vector que identifica qué líneas\n# pertenecen al título. En la estructura de\n# la novela el prólogo se sigue al título,\n# por eso decimos que se repita la palabra\n# \"Título\" del primer párrafo hasta el\n# inmediatamente anterior al prólogo (pro-1).\nti &lt;- rep(\"Título\", \n          length(1:(pro-1)))\n\n# Hacemos algo parecido con el prólogo. \n# Puesto que antecede al primer tomo,\n# repetimos \"Prólogo\" desde la primera \n# vez que aparece (pro) hasta el párrafo\n# anterior al primer tomo (tm[1]-1).\npro &lt;- rep(\"Prólogo\", \n           length(pro:(tm[1]-1)))\n\n# Para los tomos\n\n# Encuentra el tamaño en párrafos\n# de cada tomo\nlen &lt;- diff(c(tm, length(re)+1))\n\n# Repite la descripción o el nombre\n# de cada tomo para identificar\n# cada párrafo\nta &lt;- sapply(\n        1:(length(tx)), \n          function(i){\n            rep(tx[i], len[i])\n          }, \n      simplify = TRUE)\n\nta &lt;- unlist(ta)\n\n# Para los capítulos\n\n# Encuentra el tamaño en párrafos\n# de cada capítulo\nlen &lt;- diff(c(cap, length(re)+1))\n\n# Repite la descripción o el nombre\n# de cada capítulo para identificar\n# cada párrafo\nca &lt;- sapply(\n  1:(length(cx)), \n  function(i){\n    rep(cx[i], len[i])\n  }, \n  simplify = TRUE)\n\nca &lt;- unlist(ca)\n\n\nFinalmente, empleo todos los vectores generados para crear una base de datos que refleje de modo correcto la parte, el capítulo y el texto de cada párrafo:\n\n\nCode\n# Crea un data frame con los textos, la \n# identificación, de la parte y del capítulo\n\n# Combina los vectores de título,\n# prólogo, tomos en un vetor pt (parte)\npt &lt;- c(ti,pro,ta)\n\n# Añade \"Previa\" para identificar \n# aquellos párrafos que pertenecen \n# al título, prólogo y presentación \n# del primer tomo y combina con los \n# capítulos\ncp &lt;- c(rep(\"Previa\", 58),\n        ca)\n\n# Genera una base de datos con las\n# informaciones completas de\n# identificación de las partes,\n# capítulos y el texto.\ndx &lt;- data.frame(parte = pt, \n                 capitulo= cp, \n                 texto = re)\n\n\nAhora, nos toca transformar la numeración de los capítulos para poder mantener un orden secuencial. Además, nos interesa saber el número del párrafo en cada capítulo, para poder mencionar exactamente dónde se encuentra una referencia exacta en el texto. También queremos eliminar la información que no nos interesa, como los espacios en blanco entre párrafos:\n\n\nCode\n# Elimina los guiones de al identificación de\n# cada capítulo\ndx$capitulo &lt;- gsub(\"--\", \"\", dx$capitulo)\n\n# Convierte los textos de identificación de los\n# capítulos en números romanos y luego los\n# convierte en numérico\ndx$roman &lt;- as.roman(dx$capitulo)\ndx$roman &lt;- as.numeric(dx$roman)\n\n# Asigna los valores numéricos a los capítulos\ndx$capitulo[!is.na(dx$roman)] &lt;- dx$roman[!is.na(dx$roman)]\ndx$capitulo[is.na(dx$roman)] &lt;- dx$parte[is.na(dx$roman)]\n\n# Añade un 0 (cero) para los capítulos menores a\n# 10.\ndx$capitulo[nchar(dx$capitulo) == 1] &lt;- paste0(\"0\",\n    dx$capitulo[nchar(dx$capitulo) == 1])\n\n# Añade 001 y 002 para el título y el prólogo.\n# De ese modo, quedan los primeros una vez se\n# ordene la base de datos.\ndx$capitulo[dx$capitulo == \"Título\"] &lt;- \"001 - Título\"\ndx$capitulo[dx$capitulo == \"Prólogo\"] &lt;- \"002 - Prólogo\"\n\n# Elimina la información que no interesa\ndx &lt;- dx[dx$parte != dx$texto, ]\ndx$roman &lt;- NULL\ndx &lt;- dx[dx$texto != \"\", ]\n\n# Añade un número de párrafo a cada párrafo de\n# cada capítulo. Así que siempre se reinicia en\n# cuenteo a cada nuevo capítulo.\nlibrary(dplyr)\ndx &lt;- dx |&gt;\n    group_by(capitulo) |&gt;\n    mutate(parrafo = row_number())\n\n# Elimina los espacios en blanco al principio y\n# al final del texto\ndx$texto &lt;- trimws(dx$texto)\n\n# Selecciona solo las variables.de interés\ndx &lt;- dx[, c(\"parte\", \"capitulo\", \"parrafo\", \"texto\")]\n\n\n# Visualiza los resultados\nlibrary(reactable)\nreactable(dx, resizable = T, wrap = F)\n\n\n\n\n\n\n\nEl paso siguiente consiste en crear una versión distinta del mismo texto. Pero ahora, la novela será dividida de forma que cada observación en la base de datos corresponderá a un capítulo completo:\n\n\nCode\n# Genera una base de datos agregada por capítulo\n# (y no por párrafo, como la anterior)\ndc &lt;- aggregate(list(texto = dx$texto), by = list(parte = dx$parte,\n    capitulo = dx$capitulo), FUN = paste, collapse = \"\\n\\n\")\n\n# Visualiza los resultados\nreactable(dc, resizable = T, wrap = F)\n\n\n\n\n\n\n\nFinalmente, estandarizamos los nombres de las dos bases de datos y, a continuación, las guardamos en un archivo de R que será empleado en los análisis:\n\n\nCode\n# Estandariza los nombres de las\n# bases de datos\nregp &lt;- dx\nregc &lt;- dc\n\n# Guarda los resultados\nsave(regp, regc, file=\"textos/Regenta.RData\")\n\n\n¿Por qué estandarizamos los nombres? Una de las grandes ventajas de utilizar R se encuentra en su facilidad de manejo de diversas bases de datos de forma simultánea. Por ello, es importante que los nombres de las bases de datos sean fáciles de recordar y de escribir. Además, es importante que los nombres sean descriptivos, para que se pueda recordar fácilmente qué contiene cada base de datos. Cuando trabajemos más tarde con esas bases, sabremos que regp contiene los párrafos de “La Regenta” y que regc contiene los capítulos de “La Regenta”. Haremos algo semejante para la obra teatral.\n\n\nCódigo como modelo\nEl código anterior es un modelo que puede ser empleado para el tratamiento de cualquier texto con una estructura semejante a de una novela. Para ello, solo es necesario cambiar la dirección del texto original y ajustar los nombres de las partes y capítulos. Además, es posible modificar el código para que se ajuste a las necesidades de cada texto. Por ejemplo, si el texto original no tiene partes, se puede eliminar el segmento de código responsable de la división en partes. O si el texto no tiene capítulos, se puede eliminar la sección relativa a la división en capítulos.\nNo hay un código único que sea válido para todos los textos. Por ello, es necesario adaptar el código a las características de cada texto. Sin embargo, el código presentado aquí es un buen punto de partida para el tratamiento de cualquier texto con una estructura de partes o capítulos.\nComo ejercicio, se podría intentar aplicar el código a “Don Quijote”, por ejemplo. Su código en el Projecto Gutenberg es 2000."
  },
  {
    "objectID": "prepa.html#tres-sombreros-de-copa-red-de-diálogos",
    "href": "prepa.html#tres-sombreros-de-copa-red-de-diálogos",
    "title": "PreparaciónPreparación de los textos en R",
    "section": "Tres sombreros de copa: red de diálogos",
    "text": "Tres sombreros de copa: red de diálogos\n\nEstructura de la base de datos\nEn el caso de una obra de teatro, la estructura de la base de datos es diferente. En lugar de tomos y capítulos, tenemos actos y escenas. Además, en lugar de párrafos, tenemos diálogos. Existen marcadores claros que nos permiten identificar cada una de las partes.\nPor su misma estructura, además, las obras de teatro son excelente material para la realización de determinados análisis como el análisis de redes sociales (SNA, en su sigla en inglés). También permiten otros tipos de agregación, como, por ejemplo, por personaje o por acto. De ese modo, es posible analizar las diferencias en términos de lenguaje, vocabulario o temas. Aunque se pueda hacer algo parecido con una novela, el proceso de identificación del diálogo de cada personaje resulta significativamente más laborioso cuando comparado con una pieza teatral.\nEn el caso de la obra de teatro, obtendremos tres bases de datos. La primera contendrá los datos del acto, personaje que habla, personaje a quien destina su habla, el orden del diálogo en la obra y el texto del diálogo.\nLa segunda y tercera base de datos estarán conformadas por una lista de vínculos entre pares de personajes y el número de veces que se comunican de forma dirigida y no dirigida.\nUna red dirigida es aquella en la que se establece una relación de un nodo a otro que puede ser asimétrica. En este caso, la dirección importa. En este caso, el personaje A se dirige al personaje B. El primero es activo y el segundo pasivo y ni siempre existe una correspondencia perfecta o simétrica.\nSin embargo, en una red no dirigida, la relación es recíproca o la dirección indeterminada. No consideramos quién habla con quién, sino la intensidad de su vínculo o el total de veces que han interactuado.\nPensemos en un ejemplo claro extraído de las redes sociales. No es lo mismo seguir a Rosalía o cualquier persona famosa que ser seguido por una de ellas. En una red no dirigida, solo sabemos que existe un vínculo entre dos personas, pero no sabemos quién es el que sigue el otro. En una dirigida, tenemos una información vital que nos permite entender mejor la importancia de cada nodo en la red.\nCada una de esas formas de tratar el vínculo entre los personajes nos ofrece información distinta sobre el rol y la importancia de cada uno de ellos en la obra. Por lo tanto, nos interesa tener ambas redes para analizarlas y compararlas.\nPara ello, emplearemos la obra “Tres sombreros de copa” de Miguel Mihura. Se trata de una pieza en tres actos con 18 personajes. No presenta una estructura compleja, lo que facilita el tratamiento de los datos.\n\n\nDe diálogos a datos\nEl primer paso es leer el texto de la obra. Aquí transformaremos los diálogos en datos que puedan, luego, ser sometidos a análisis. Empezamos por leer el texto de la obra. Para ello, emplearemos la función pdf_text del paquete pdftools. A continuación, eliminaremos los espacios en blanco múltiples entre palabras y las cabeceras.\n\n\nCode\n# Carga los paquetes necesarios para el\n# tratamiento de los textos\nlibrary(pdftools)  # Lee el pdf original de la obra\nlibrary(readr)  # Lee las líneas del texto \nlibrary(stringi)  # Funciones de manipulación de texto\n\n# Lee el pdf de la obra de Mihura\npd &lt;- pdf_text(\"https://www.edu.xunta.gal/centros/cpilorenzobaleiron/system/files/u2/mihura__miguel_-_tres_sombreros_de_copa.pdf\")\n\n# Elimina los espacios en blanco múltiples entre\n# palabras\npx &lt;- read_lines(pd)\npx &lt;- trimws(px)\npx &lt;- gsub(\"\\\\s+\", \" \", px, perl = T)\n\n# Elimina las cabeceras de las páginas y los\n# números de página del PDF\nnn &lt;- which(px %in% c(\"3 sombreros de copa Miguel Mihura\"))\npd &lt;- px[-c(nn - 1, nn)]\n\n# Elimina el número de la última página\npd &lt;- pd[-length(pd)]\n\n# Hace una modificación del texto para facilitar\n# el reconocimiento de uno de los personajes\npd &lt;- stri_replace_all_fixed(pd, \"EL ODIOSO SEÑOR,\",\n    \"\\nEL ODIOSO SEÑOR.\")\n\n\nEn el siguiente paso, toca separar los diálogos de los personajes. Emplearemos una expresión regular que identifica los nombres de los personajes y los separa de los diálogos creando un prefijo “PERSONA-” para identificar más fácilmente qué líneas corresponden al nombre del interlocutor.\nEn la pieza, los nombres de los personajes se identifican por una o varias palabras en mayúsculas que inician la frase seguidas de un punto, un espacio y, luego, son sucedidas por el texto. Por ejemplo, “DIONISIO. No. No veo nada.” o “DON ROSARIO. Parece usted tonto, don Dionisio.” nos informan un patrón claro. El objetivo es cortar el texto en dos partes: una con el nombre del personaje y otra con el diálogo.\n\n\nCode\n# Identifica las líneas que contienen los nombres\n# de los personajes y las separa de los diálogos\npx &lt;- stri_replace_all_regex(pd,\"^([[A-Z|\\\\p{Lu}]+\\\\s{1,1}[A-Z|\\\\p{Lu}]+]+)(\\\\.\\\\s{1,1})\",\"\\n\\nPERSONA-$1$2\\n\\n\") \n\n\nComo en el caso de la novela, empleamos una expresión regular para identificar los nombres y separarlos de los textos.\n\n^ indica que la expresión regular buscará todo que comience una línea con las características a continuación.\n[A-Z|\\\\p{Lu}]+ busca una o más letras en mayúsculas que puedan contener textos con tilde.\n\\\\s{1,1} busca un espacio en blanco.\n[A-Z|\\\\p{Lu}]+ busca una o más letras en mayúsculas que puedan contener textos con tilde.\n\nComo podéis ver, la segunda expresión se repite, pues los nombres, que están en mayúsculas en la edición elegida, pueden estar compuestos por más de una palabra. También vemos que todo ese conjunto se encuentra dentro de un grupo []+ que indica que puede haber una o más repeticiones de ese conjunto, es decir, varias palabras en mayúsculas separadas por un espacio.\nEl segundo grupo de la expresión regular, (\\\\.\\\\s{1,1}), busca un punto seguido seguido de un espacio en blanco.\nAsí que, en resumen, la expresión regular busca una o más palabras en mayúsculas que inicien una línea y estén seguidas de un punto y un espacio en blanco. Este es el patrón que buscamos identificar.\nLa segunda añade dos saltos de línea (\\n\\n) y la fórmula PERSONA- antes de repetir los valores encontrados ($1$2) y, luego, introducir otros dos saltos de línea (\\n\\n) para separar el nombre del personaje del texto del diálogo.\nNuestros ejemplos quedarían así:\nOriginal: “DIONISIO. No. No veo nada.”\nModificado: “\\n\\nPERSONA-DIONISIO.\\n\\nNo. No veo nada.”\nOriginal: “DON ROSARIO. Parece usted tonto, don Dionisio.”\nModificado: “\\n\\nPERSONA-DON ROSARIO.\\n\\nParece usted tonto, don Dionisio.”\nAl ejecutar la función read_lines() justo en seguida, el nombre y el textos quedan separados.\nEn el código abajo realiza justamente dicha tarea y, además, elimina los saltos de línea que se encuentran en medio de los diálogos.\n\n\nCode\n# Elimina los saltos de línea en los diálogos\npx &lt;- read_lines(px)\npd &lt;- paste(px, collapse = \"\\n\")\npx &lt;- stri_replace_all_regex(pd,\"(\\\\S|\\\\p{L})(\\n|\\n\\n)(\\\\S{1}|\\\\p{L})\",\"$1 $3\")\npd &lt;- read_lines(px)\n\n\nCon esto resuelto, obtenemos la descripción y los índices de los actos y personajes. Se emplearán luego para la creación de la base de datos con los diálogos.\n\n\nCode\n# Identifica los actos\nna &lt;- which(stri_detect_regex(pd, \"^ACTO\")==TRUE)\nta &lt;- pd[na]\n\n# Identifica los personajes\nnp &lt;- which(stri_detect_regex(pd, \"^PERSONA-\")==TRUE)\npp &lt;- pd[np]\n\n\nComo en “La Regenta”, se crean variables o vectores que repiten el título del acto y el nombre del personaje para cada diálogo.\n\n\nCode\n# Atribuye una sección inicial de preámbulo\n# para la presentación de personajes y\n# la descripción de la escena inicial\npt &lt;- rep(\"Preambulo\",length(1:(na[1]-1)))\n\n# Para cada acto, se asigna el título del acto\nfor(i in 1:(length(na)-1)){\n  \n  na[i+1]-na[i]  \n\n  pt &lt;- c(pt,rep(ta[i],length((na[i]):(na[i+1]-1))))\n    \n}\n\n# Identifica el último acto\npt &lt;- c(pt, rep(ta[length(na)],length((na[length(na)]):length(pd))))\n\n# Atribuye una sección inicial de introducción\npe &lt;- rep(\"Introducción\",length(1:(np[1]-1)))\n\n# Para cada personaje, se asigna el nombre del personaje\nfor(i in 1:(length(np)-1)){\n  \n  np[i+1]-np[i]  \n  \n  pe &lt;- c(pe,rep(pp[i],length((np[i]):(np[i+1]-1))))\n  \n}\n\npe &lt;- c(pe, rep(pp[length(np)],length((np[length(np)]):length(pd))))\n\n\nCon todas las variables a mano:\n\nlas juntamos en una base de datos;\neliminamos las líneas vacías y;\neliminamos diálogos que contienen el nombre del acto.\n\n\n\nCode\n# Convierte en una base de datos\ndd &lt;- data.frame(pt, pe, pd)\ndd &lt;- dd[dd$pd!=\"\",]\ndd &lt;- dd[dd$pe!=dd$pd,]\n\n\nPara garantizar que podamos regresar en cualquier momento a la secuencia original de los diálogos, creamos una variable que ordene los diálogos en el orden en que aparecen en la obra. No obstante, a veces, existe más de una línea de diálogo por personaje. El orden debe llevar en cuenta esta peculiaridad.\n\n\nCode\n# Define un orden para los\n# diálogos\ndd$ord &lt;- NA\ndd$px &lt;- paste0(dd$pt,\" - \", dd$pe)\n\n# Para cada diálogo\nfor(i in 1:nrow(dd)){\n  \n  # Establece el orden del dialogo\n  # de forma secuencial\n  dd$ord[i] &lt;- i\n  \n  # Si es el segundo diálogo o posterior\n  if(i&gt;1){\n    \n    # Si el personaje es el mismo\n    if(dd$px[i]==dd$px[i-1]){\n      \n      # Mantiene el mismo orden del\n      # personaje anterior\n      dd$ord[i] &lt;- dd$ord[i-1]\n      \n    # Caso contrario\n    }else{\n      # Aumenta el orden del personaje\n      # (orden del anterior más uno)\n      dd$ord[i] &lt;- dd$ord[i-1]+1 \n    }\n  }\n  \n}\n\n\nEstamos casi ya. Ahora, juntamos el texto de un mismo personaje, en el mismo orden dentro de un acto, en un solo diálogo. De esa manera, evitamos múltiples observaciones que, en realidad, dicen respeto a la misma unidad de análisis.\n\n\nCode\n# Fusiona el texto de un mismo personaje \n# en un mismo dialogo\nag &lt;- aggregate(list(dialogo=dd$pd), \n                by=list(acto=dd$pt,\n                        personaje_A=dd$pe,\n                        orden=dd$ord), \n                FUN=paste, \n                collapse=\"\\n\")\n\n\nEl paso final consiste en eliminar la información innecesaria, como retirar el prefijo “PERSONA-” que hemos empleado como ayuda, y visualizar los resultados.\n\n\nCode\n# Elimina información innecesaria\nag$personaje_A[grep(\"ACTO\",ag$dialogo)] &lt;- \"Introducción\"\nag$personaje_A&lt;-gsub(\"PERSONA-\",\"\",ag$personaje_A)\nag$personaje_A&lt;-gsub(\"\\\\.\",\"\",ag$personaje_A)\n\n# Vemos el resultado\nreactable(ag, resizable = T, wrap = F)\n\n\n\n\n\n\n\n\n\nDe datos a redes de diálogos\nPara transformar la base de datos en una red de diálogos, necesitamos identificar los personajes que dialogan entre sí. Para ello, creamos una variable que identifique el personaje que responde al interlocutor anterior. En muchas ocasiones, el diálogo se interrumpe por distintas razones, como la entrada de un nuevo personaje, el cambio de escena o el fin de un acto. En estos casos, no podemos considerar que el diálogo anterior continúa. Por lo tanto, necesitamos identificar estos puntos de corte.\nLa manera más fácil es realizar una lectura rápida de los diálogos para identificar estos puntos. Abajo, creamos en la base de datos una nueva variable llamada “corte” que identifica tales puntos y nos permitirán establecer de forma correcta el sentido del diálogo y sus interlocutores.\n\n\nCode\n# Identifica los puntos de corte en los diálogos\n# que corresponden a transiciones de escena o\n# cuándo sale uno o más personajes y se empieza\n# otro dialogo o se trata de una respuesta al \n# interlocutor anterior que no obtiene respuesta\n# y se pasa a un nuevo diálogo con otro personaje. \n# Por lo tanto, no se puede considerar\n# como una continuación del dialogo anterior.\nnc &lt;- c(2,112,177,208,211,217,268,338,365,372,378, \n        380, 388,399,417,428,439,445, 448,452,463,\n        469,480,494,495,594,599,605,653,661,673,675,\n        745,824,825,834,837,855,864)\n\n# Crea una variable corte con valor cero\n# para todos los diálogos\nag$corte &lt;- 0\n\n# En aquellos diálogos que representan\n# un corte, cambia de cero a uno para\n# establecer el punto de interrupción\nag$corte[nc] &lt;- 1\n\n\nEl siguiente paso resulta crucial. Necesitamos identificar el personaje al que se dirige el diálogo. Para ello, creamos una nueva variable en la base de datos llamada “personaje_B” que identificará dicho interlocutor. En este momento, emplearemos los puntos de interrupción o corte en los diálogos para determinar de forma correcta a quién se destina el habla.\n\n\nCode\n# Crea una variable vacía en la base de\n# datos para almacenar el personaje\n# que será el receptor de la respuesta\nag$personaje_B &lt;- NA\n\n# Para cada diálogo de la pieza\nfor(i in 1:(nrow(ag)-1)){\n  \n  # Si es la introducción del capitulo o de la obra,\n  # se pasa al siguiente diálogo\n  if(ag$personaje_A[i]==\"Introducción\") next\n\n  # Si se trata de un corte o fin de escena\n  # se considera como respuesta al personaje\n  # anterior (si no es la introducción de la escena)\n  if(ag$corte[i]==1){\n    \n    # Si el personaje anterior es la introducción\n    # se pasa al siguiente diálogo\n    if(ag$personaje_A[i-1]==\"Introducción\") next\n    \n    # Atribuye el personaje de destino del diálogo\n    # como en personaje anterior (respuesta final)\n    ag$personaje_B[i] &lt;- ag$personaje_A[i-1]\n    \n  # En caso que no sea un corte de escena  \n  }else{ \n    # El personaje de destino del diálogo\n    # es el inmediatamente posterior\n    ag$personaje_B[i] &lt;- ag$personaje_A[i+1]\n  }\n}\n\n# Hay un pasaje en el que Sagra, Carmela y\n# Trudy se dirigen a Fanny, por eso resulta\n# necesario corregir el personaje de destino\nag$personaje_B[c(339:355,357:365)] &lt;- \"FANNY\"\n\n# La respuesta de Fanny\nag$personaje_B[c(356)] &lt;- \"LAS TRES\"\n\n# Otra corrección puntual\nag$personaje_B[c(825)] &lt;- \"DIONISIO\"\n\n# Elimina los espacios en blanco al \n# final de los nombres de los personajes\nag$personaje_A &lt;- trimws(ag$personaje_A)\nag$personaje_B &lt;- trimws(ag$personaje_B)\n\n\nFinalmente, creamos la red de diálogos. Ya tenemos una variable con el que habla (personaje_A) y con quién dialoga (personaje_B). A continuación, crearemos una variable para contar cuántas veces hablan entre sí cada par de personajes y sumamos todos. El resultado es una red dirigida de diálogos.\n\n\nCode\n# Separa solo los pares de personaje\n# en diálogo\nres &lt;- ag[,c(\"personaje_A\",\"personaje_B\")]\nres &lt;- res[! is.na(res$personaje_B),]\n\n# Crea un contador para saber\n# cuántas veces cada par de personajes\n# ha dialogado\nres$veces &lt;- 1\n\n# Elimina la introducción como personaje\n# de los dos tipos de red\nres &lt;- res[res$personaje_A!=\"Introducción\",]\nres &lt;- res[res$personaje_B!=\"Introducción\",]\n\n# Guarda los resultados en un nuevo\n# objeto para crear una red no\n# direccional\nrea &lt;- res\n\n# Suma las veces en que se repiten\n# los pares de personajes (red dirigida)\nres &lt;- aggregate(list(freq=res$veces),\n                 by=list(personaje_A=res$personaje_A,\n                         personaje_B=res$personaje_B),\n                 FUN=sum)\n\n# ordena en orden decendiente por la frecuencia \n# en que dialogan \nres &lt;- res[order(res$freq, decreasing = T),]\n\n# Vemos el resultado\nreactable(res, resizable = T, wrap = F)\n\n\n\n\n\n\n\nComo podemos observar, la pareja Dionisio-Paula es la que más dialoga en la obra. Viene seguida de las díadas Dionisio-Don Rosario y Paula-El Odioso Señor. Los diálogos entre esos cuatro personajes superan el 60% de todas las interacciones en la pieza. Pero ya nos vamos adelantando con el análisis.\nConcentrémonos ahora en la creación de la red no dirigida. Se trata de la última etapa en la preparación de los datos. Como ya hemos mencionado, también nos interesa saber cuántas veces han dialogado dos personajes sin importar quién es el que inicia la conversación.\n\n\nCode\n# Carga el paquete necesario para lidiar con\n# grafos\nlibrary(igraph)\n\n# Uniformiza los valores duplicados\n# (Dionisio-Paula y Paula-Dionisio, \n# por ejemplo, se convierten todos \n# en Dionisio-Paula)\n\n# 1) Crea un grafo NO DIRECCIONAL a partir de \n# la red de personajes\ng &lt;- graph_from_data_frame(\n            rea[,c(\"personaje_A\",\"personaje_B\")], \n            directed=FALSE)\n\n# 2) Simplifica la estructura para hacer con que\n# todos los valores estén en una sola dirección\n# pero sin remover los repetidos, pues queremos\n# contarlos\ng &lt;- simplify(g, \n              remove.multiple = F, \n              remove.loops = F)\n\n# Convierte la red en una base de datos\nax &lt;- igraph::as_data_frame(g)\n\n# Cuenta cuántas veces se repite cada par\nax$freq &lt;- 1\n\n# Suma las veces en que se repiten\n# los pares de personajes (red no dirigida)\naa &lt;- aggregate(list(freq=ax$freq),\n                by=list(personaje_A=ax$from,\n                        personaje_B=ax$to),\n                FUN=sum)\n\n# Ordena los resultados en orden descendente\naa &lt;- aa[order(aa$freq, decreasing = T),]\n# Vemos los resultados\nreactable(aa, resizable = T, wrap = F)\n\n\n\n\n\n\n\nFinalmente, estandarizamos los nombres de las bases de datos y las guardamos en un archivo de R.\n\n\nCode\n# Estandariza los nombres de las bases \n# de datos\n\n# Tres sombreros de copa - dialogos\ntsc_d &lt;- ag    \n\n# Tres sombreros de copa - red de personajes (no dirigida)\ntsc_rn &lt;- aa   \n\n# Tres sombreros de copa - red de personajes (dirigida)\ntsc_rd &lt;- res  \n\n# Guarda los resultados\nsave(tsc_d, \n     tsc_rd, \n     tsc_rd, \n     file=\"textos/Tres_sombreros_de_copa.RData\")"
  },
  {
    "objectID": "regenta.html",
    "href": "regenta.html",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "",
    "text": "En este apartado, se analiza la obra “La Regenta” de Leopoldo Alas Clarín a partir de diferentes técnicas de análisis de contenido. Se tratan, en su mayor parte, de acercamientos estadísticos o cuantitativos a los textos literarios. Por lo tanto, representan una visión limitada de la obra y solo complementaria a la lectura y el análisis cualitativo detenido de la misma.\nNos acercaremos al texto, primero, intentando descubrir cuáles palabras se destacan, sus frecuencias y distribuciones. Luego, analizaremos la obra desde la perspectiva de los personajes, sus relaciones y sus apariciones en la obra."
  },
  {
    "objectID": "regenta.html#introducción",
    "href": "regenta.html#introducción",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "",
    "text": "En este apartado, se analiza la obra “La Regenta” de Leopoldo Alas Clarín a partir de diferentes técnicas de análisis de contenido. Se tratan, en su mayor parte, de acercamientos estadísticos o cuantitativos a los textos literarios. Por lo tanto, representan una visión limitada de la obra y solo complementaria a la lectura y el análisis cualitativo detenido de la misma.\nNos acercaremos al texto, primero, intentando descubrir cuáles palabras se destacan, sus frecuencias y distribuciones. Luego, analizaremos la obra desde la perspectiva de los personajes, sus relaciones y sus apariciones en la obra."
  },
  {
    "objectID": "regenta.html#las-palabras-que-cuentan",
    "href": "regenta.html#las-palabras-que-cuentan",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Las palabras que cuentan",
    "text": "Las palabras que cuentan\nEl primer paso del análisis consiste en cargar los datos que hemos preparado en la sección de preparación de los datos y convertirlo en un objeto de tipo corpus. Para ello, emplearemos el paquete de R llamado quanteda, que resulta bastante completo para el análisis de contenido.\nEl código abajo carga los datos en la memoria, los convierte en un corpus y muestra algunas estadísticas básicas de los capítulos de la obra, como el número de palabras (tokens), el número de palabras únicas (types) y la cantidad de frases.\n\n\nCode\n# carga los datos de \"La Regenta\"\nload(\"../textos/Regenta.RData\")\n\n# carga el paquete quanteda para \n# algunos análisis\nlibrary(quanteda)\n\n# carga el paquete reactable que\n# permitirá mostrar los resultados en\n# una tabla interactiva\nlibrary(reactable)\n\n# Elimina el título y el prólogo\nregc &lt;- regc[3:nrow(regc),]\n\n# convierte en un documento corpus\ncp &lt;- corpus(regc, text_field = \"texto\")\n\n# define los capítulos como nombre\n# de los documentos\ndocnames(cp) &lt;- regc$capitulo\n\n# muestra estadísticas básicas de\n# cada capítulo\nreactable(summary(cp))\n\n\n\n\n\n\n\n\nVemos que los treinta capítulos de la obra tienen una extensión que va de poco más de ocho mil hasta aproximadamente veintiún mil palabras. No resulta nada sorprendente que las palabras únicas y el número de frases varíen de forma proporcional.\n\nFrecuencias de palabras\nEl próximo paso consiste en convertir el corpus en una matriz de términos. Para ello, primero convertimos los textos en tokens, que son las palabras individuales de los textos. Luego, eliminamos las palabras vacías (stopwords) y las palabras que no aportan información, como los números y los signos de puntuación. Este objeto será luego empleado en diversas técnicas de análisis de contenido.\n\n\nCode\n# convierte en tokens y remueve\n# punctuación, símbolos y números\ntk &lt;- tokens(cp, remove_punct = TRUE, \n                  remove_numbers = TRUE, \n                  remove_symbols = TRUE)\n\n# Elimina las palabras vacías\ntk &lt;- tokens_remove(tk, stopwords(\"es\"))\n\n\n\nPara poder explorar cuáles palabras se destacan en la obra podemos emplear una técnica llamada análisis de frecuencia de palabras. En este caso, crearemos una matriz de términos de documentos (document-feature matrix), que es una representación matricial de los textos en la que las filas representan los documentos y las columnas las palabras. Cada celda de la matriz contiene el número de veces que una palabra aparece en un documento.\nEl código abajo crea la matriz y convierte todos los términos en minúsculas para facilitar el cuenteo. Luego, muestra las cincuenta palabras más frecuentes en la obra.\n\n\nCode\n# convierte en una matriz de términos\ndtm &lt;- dfm(tk, \n           tolower = TRUE)\n\n# muestra las 50 palabras más frecuentes\ntopfeatures(dtm, 50)\n\n\n      don        si       ana     usted magistral   aquella     aquel    álvaro \n     1789      1164       894       822       767       758       731       488 \n   víctor      casa   regenta     señor   vetusta      allí       ser   después \n      487       477       467       458       455       446       430       415 \n    decía      doña       vez     mesía     podía     ahora      bien      ojos \n      414       411       390       372       368       361       349       346 \n   fermín       así       iba       dos    quería      dijo   siempre     menos \n      345       344       333       330       328       325       325       322 \n    mismo    hombre       tan      vida      dios     veces quintanar     mundo \n      318       314       312       311       309       305       303       285 \n    mujer     todas     sabía       ver    tiempo      alma       día   parecía \n      284       279       279       279       278       275       271       267 \n     amor   aquello \n      267       265 \n\n\n\nEn este caso, hemos considerado palabras aisladas, pero podemos repetir el análisis con bigramas o trigramas, que son secuencias de dos o tres palabras consecutivas. Estas combinaciones permiten encontrar secuencias de ideas que pueden revelar ciertos contenidos o patrones en el texto.\n\n\nCode\nbi &lt;- tokens_ngrams(tk, n = 2)\n\n# convierte en una matriz de términos\ndtm &lt;- dfm(bi)\n\n# muestra los 50 bigramas más frecuentes\ntopfeatures(dtm, 50)\n\n\n     don_víctor      don_álvaro      don_fermín     don_pompeyo      doña_paula \n            450             390             302             123             119 \n        tal_vez      don_santos  doña_petronila      don_carlos   aquella_noche \n            105              93              66              60              51 \n  aquel_momento    don_custodio        doña_ana    doña_anuncia        cada_vez \n             48              47              47              47              46 \n   don_cayetano   aquella_tarde      don_frutos     doña_camila señor_magistral \n             46              45              43              38              37 \n   aquel_hombre   don_saturnino        dos_tres  don_robustiano     don_saturno \n             36              35              34              34              32 \n    pocas_veces    todas_partes    muchas_veces     usted_señor        cada_día \n             32              31              31              31              30 \n  aquella_mujer        si_usted       aquel_día       podía_ser        don_juan \n             30              30              29              29              29 \n       voz_baja       debía_ser     doña_rufina       buen_mozo      ana_ozores \n             28              28              28              27              26 \n  día_siguiente    álvaro_mesía  caserón_ozores      aire_libre      mire_usted \n             26              26              26              25              25 \n   santa_teresa    mundo_entero  cualquier_cosa     doña_águeda       señor_don \n             25              24              24              24              23 \n\n\nCode\ntri &lt;- tokens_ngrams(tk, n = 3)\n\n# convierte en una matriz de términos\ndtm &lt;- dfm(tri)\n\n# muestra los 50 trigramas más frecuentes\ntopfeatures(dtm, 50)\n\n\n         don_álvaro_mesía      don_pompeyo_guimarán      don_víctor_quintanar \n                       22                        20                        17 \n   don_saturnino_bermúdez       don_santos_barinaga        don_frutos_redondo \n                       16                        13                        11 \n      casa_doña_petronila            dos_tres_veces          dio_media_vuelta \n                       11                         9                         9 \n          doña_ana_ozores             si_don_víctor                  ta_ta_ta \n                        8                         8                         8 \n          casa_don_víctor         darse_cuenta_ello             don_álvaro_si \n                        8                         8                         8 \n doña_petronila_rianzares            don_fermín_pas      jefe_partido_liberal \n                        8                         7                         7 \npartido_liberal_dinástico          don_tomás_crespo        almunia_don_godino \n                        7                         7                         7 \n       hermano_mayor_alma            _la_cruz_roja_     don_robustiano_somoza \n                        7                         7                         7 \n                 ja_ja_ja        media_hora_después            fray_luis_león \n                        7                         7                         6 \n         don_juan_tenorio          decía_don_álvaro            dio_paso_atrás \n                        6                         6                         6 \n           ana_don_álvaro           dijo_don_víctor             si_don_álvaro \n                        6                         6                         6 \n don_custodio_beneficiado          señor_don_fermín          gritó_don_víctor \n                        5                         5                         5 \n        daba_media_vuelta    hago_cuestión_personal          aquel_don_álvaro \n                        5                         5                         5 \n         usted_señor_foja             dijo_voz_baja            don_víctor_vio \n                        5                         5                         5 \n         pobre_don_santos        treinta_cinco_años  beneficiado_don_custodio \n                        5                         4                         4 \n        hablaban_voz_baja   visitación_olías_cuervo     don_restituto_mourelo \n                        4                         4                         4 \n         primera_vez_vida          señor_don_víctor \n                        4                         4 \n\n\n\n¿Qué vemos en los resultados de los bigramas y trigramas? El primer patrón que emerge es la presencia de nombres de personajes, como “don Víctor Quintanar”, “don Álvaro” o “do Fermín”. También aparecen nombres de lugares, como “Vetusta” o “Santa Cruz”. Por último, encontramos algunas secuencias que parecen describir acciones o situaciones, como “señor marqués” o “señor don Fermín”.\n\n\nColocaciones\nOtro recurso útil a la hora de explorar los términos más frecuentes en un texto proviene de las colocaciones. Las colocaciones son secuencias de palabras que aparecen juntas con más frecuencia de lo que se esperaría por azar. En otras palabras, son secuencias de palabras que tienen un significado especial o que se emplean en un contexto específico.\nEl código abajo emplea la función textstat_collocations del paquete quanteda.textstats para encontrar las colocaciones más frecuentes en el texto1. En este caso, hemos considerado solo las colocaciones que aparecen al menos diez veces en el texto.\n\n\nCode\n# Carga el paquete\nlibrary(quanteda.textstats)\n\n# Encuentra las colocaciones\ncol &lt;- textstat_collocations(tk, \n                             min_count = 10)\n\n# Muestra los resultados\nreactable(col, resizable = TRUE, wrap=F)\n\n\n\n\n\n\n\n\nComo hemos podido ver, vuelven a aparecer los nombres de los personajes, lugares, pero ahora también llaman la atención algunos términos que indican frecuencia (algunas veces, muchas veces, dos tres, cada día) o hacen referencia al tiempo (aquel momento, aquella tarde, media hora). Estos términos pueden ser útiles para entender el contexto en el que se desarrolla la obra.\n\n\nPalabras-clave\nOtro recurso que disponemos para examinar el contenido de un texto es el análisis de palabras-clave. Podemos interesarnos por un tema o concepto específico y buscar en qué contexto aparece en el texto. En este caso, vamos a buscar la palabra “adulterio” y ver en qué contexto aparece en la obra.\nUna estrategia sería ver cuántas veces aparece “adulterio” en la novela, pero eso no nos daría mucha información sobre el contexto en el que se emplea. Por eso, vamos a emplear la función kwic (keyword in context) del paquete quanteda para buscar la palabra en el texto y ver en qué contexto aparece.\nEl resultado es una tabla que muestra la palabra “adulterio” y las palabras que la rodean en el texto. De esta manera, podemos entender mejor cómo se emplea la palabra en la obra y qué significado tiene en el contexto de la novela.\n\n\nCode\n# Carga el paquete\nlibrary(quanteda)\n\n# recreamos los tokens\n# sin remover la puntuación\n# o los stopwords\ntk &lt;- tokens(cp)\n\n# Busca la palabra \"adulterio\" en\n# su contexto\nkw_amor &lt;- kwic(tk, \n                pattern =  \"adulterio\")\n\n# Muestra los resultados\nreactable(kw_amor, \n          resizable = TRUE, \n          wrap=F)\n\n\n\n\n\n\n\n\nSaltan a la vista los calificativos y acciones que se revelan cuando se analiza el contexto de “adulterio”. Se ven atributos como “repugnante”, “infame”, “ominoso”, “escándalo”. También acciones que se asocian como respuesta al adulterio: “vengar”, “duelo”, “batirme”. En pocas palabras, se nota el rechazo social al adulterio y se puede fácilmente imaginar un desaforado cornudo, pistola en mano, buscando venganza.\nPodemos emplear un tipo de visualización de datos llamado árbol de palabras para representar gráficamente el contexto en el que aparece la palabra “adulterio”. En este caso, vamos a emplear la función wordtree del paquete tenet para crear un árbol de palabras que muestre las palabras que aparecen antes y después de “adulterio” en el texto. No obstante, como hemos visto, la palabra “adulterio” no aparece muchas veces en la novela, por lo que el árbol de palabras no será muy complejo ni tampoco interesante. Probemos algo más picante, que salga el “amor”.\n\n\nCode\nlibrary(tenet)\n\n\nwordtree(cp, \"amor\")\n\n\n\n\n\n\n  \n  \n  \n                   \n                   \n                   \n                   \n                   \n\n\n\nAhora las cosas se ponen más interesantes. Vemos que las palabras cambian de tamaño según su frecuencia, de modo que sabemos que “amor de” resulta más común que “amor del”, por ejemplo.\nPero, ¿qué palabras debo elegir? ¿Cómo sé cuáles son las más relevantes? Para responder a estas preguntas, podemos emplear una técnica llamada keyness. Esta técnica compara la frecuencia de una palabra en un texto con su frecuencia en otro texto de referencia. Si la palabra aparece poco en el texto de referencia, entonces debería aparecer poco en el texto elegido. Si no es así, tenemos una palabra clave, entendida como un término cuya frecuencia resulta muy superior a la esperada.\nEl capítulo 8 de la novela es una delicia para emplear esa técnica. Se trata de un pasaje que contiene la descripción de una merienda en la casa de la marquesa de Vegallana y sus “preparativos” en la cocina. Emplearemos la función textstat_keyness del paquete quanteda.textstats para encontrar las palabras clave.\n\n\nCode\n# Cargamos los paquetes necesarios\nlibrary(quanteda.textstats)\nlibrary(quanteda.textplots)\n\n# Volvemos a crear los tokens\n# sin puntos ni stopwords\n\n# convierte en tokens y remueve\n# punctuación, símbolos y números\ntk &lt;- tokens(cp, remove_punct = TRUE, \n                  remove_numbers = TRUE, \n                  remove_symbols = TRUE)\n\n# Elimina las palabras vacías\ntk &lt;- tokens_remove(tk, stopwords(\"es\"))\n\n# Creamos la matriz de frecuencia\n# de términos\ndtm &lt;- dfm(tk)\n\n# Calculamos la estadística, \n# considerando el capítulo 8 como\n# objetivo y el resto de la novela\n# como referencia\nkey &lt;- textstat_keyness(dtm, \n                        target = \"08\")\n\n# Visualizamos los resultados\ntextplot_keyness(key)\n\n\n\n\n\n\nLas palabras asociadas a la comida se destacan: cocina, despensa, cocinero, fogón, pinche, merienda, almíbares. También se destacan palabras asociadas a la nobleza: marques, marquesa, regencia, así como el lugar de las tertulias (el salón amarillo). De otro lado, vemos las palabras que está fuera: Magistral, Fermín, Víctor, Ana, Quintanar, que son personajes que no aparecen en el capítulo 8 o apenas lo hacen.\nPodemos añadir información empleando la función plotKeyness del paquete tenet para visualizar los resultados de una manera interactiva y bidimensional. Nos interesa saber, además del chi2, la frecuencia de las palabras. No es lo mismo una palabra rara que aparece poco que otra que no resulta tan común en la obra, pero que se emplea mucho en el capítulo en cuestión.\n\n\nCode\n# carga el paquete\nlibrary(tenet)\n\n# crea el gráfico\nplotKeyness(cp, \n            ref.cat= \"08\")\n\n\n\n\n\n\n\nDe ese modo, las palabras que se encuentren lo más lejos del eje horizontal y vertical serán las más específicas del capítulo. Por otra parte, aquellas que se encuentren más a la derecha, so. las más frecuentes en el capítulo 8. Por lo tanto, términos como “visita”, “cocina”, “marqués” se destacan tanto por su particular incidencia en el capítulo, como por su alta frecuencia. También vemos en rojo las palabras empleadas menos que lo esperado.\nSi queremos analizar cuáles son las expresiones de peso en los demás capítulos, basta cambiar el argumento ref.cat por el número del capítulo que nos interese. Estos pasos exploratorios nos permiten tener una idea de los temas y personajes que aparecen en cada capítulo y, por consiguiente, de las palabras clave que los caracterizan."
  },
  {
    "objectID": "regenta.html#diccionarios-y-codificación-temática",
    "href": "regenta.html#diccionarios-y-codificación-temática",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Diccionarios y codificación temática",
    "text": "Diccionarios y codificación temática\ndiccionario\n\n\nCode\ndic &lt;- dictionary(\n  list(\n    familia=c(\"padre\", \"madre\", \"hijo\", \"hija\", \n              \"hermano\", \"hermana\"),\n    sociedad=c(\"vetustense\",\"puebl\",\"ciudad\",\"conversa\",\n               \"amig\",\"noble\",\"arist\"),\n    iglesia=c(\"cura\",\"obispo\",\"sacerdo\",\"confesión\",\n              \"religi\",\"canónig\",\"capilla\"),\n    economia=c(\"dinero\",\"deuda\",\"negoci\",\"trabaj\",\n               \"fortuna\",\"rico\",\"rica\"),\n    sentimientos=c(\"culpa\",\"alegr\",\"amor\",\"remordimiento\",\n                   \"ridículo\",\"vergüenza\",\"triste\"),\n    misticismo=c(\"Fermín de Pas\",\"Fermín\",\"\\\\bde Pas\\\\b\",\n                 \"magistral\", \"espirit\",\"dios\"),\n    adulterio=c(\"Álvaro Mesía\",\"Álvaro\",\"Mesía\",\n                \"Presidente del Casino\", \"marido\", \n                \"placer\", \"pasión\", \"amante\",\"amorío\"),\n    espacio=c(\"casino\",\"catedral\",\"vivero\",\"casa\",\n              \"espolón\",\"teatro\"),\n    tiempo=c(\"otoño\",\"verano\",\"invierno\",\"primavera\",\n             \"semana santa\",\"navidad\")\n  )\n)\n    \nlibrary(tenet)\n    \ntagCorpus(cp, \n          dic, \n          reshape.to = \"sentence\", \n          defaultPageSize = 3)"
  },
  {
    "objectID": "sombreros.html",
    "href": "sombreros.html",
    "title": "Tres sombreros de copaAnálisis de redes de diálogo en R",
    "section": "",
    "text": "(EN BREVE - PARA SEGUNDA SESIÓN DEL CURSO)"
  },
  {
    "objectID": "sombreros.html#introducción",
    "href": "sombreros.html#introducción",
    "title": "Tres sombreros de copaAnálisis de redes de diálogo en R",
    "section": "",
    "text": "(EN BREVE - PARA SEGUNDA SESIÓN DEL CURSO)"
  },
  {
    "objectID": "sombreros.html#redes-de-diálogo-en-tres-sombreros-de-copa",
    "href": "sombreros.html#redes-de-diálogo-en-tres-sombreros-de-copa",
    "title": "Tres sombreros de copaAnálisis de redes de diálogo en R",
    "section": "Redes de diálogo en “Tres sombreros de copa”",
    "text": "Redes de diálogo en “Tres sombreros de copa”\nAbrimos los datos\n\n\nCode\n# carga los datos de \"La Regenta\"\nload(\"../textos/Regenta.RData\")\n\n\nHacemos un análisis sumario de los capítulos\naaa"
  },
  {
    "objectID": "regenta.html#ubicación-de-las-categorías-temáticas-en-el-texto",
    "href": "regenta.html#ubicación-de-las-categorías-temáticas-en-el-texto",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Ubicación de las categorías temáticas en el texto",
    "text": "Ubicación de las categorías temáticas en el texto\n\n\nCode\ndicf &lt;- dictionary(\n  list(\n    familia=c(\"padre\", \"madre\", \"hijo\", \"hija\", \"hermano\", \"hermana\"),\n    sociedad=c(\"vetustense\",\"puebl\",\"ciudad\",\"conversa\",\n               \"amig\",\"noble\",\"arist\")\n))\n\n\nplotLexDiv(cp, \n           dicf, \n           title =\"La Regenta\", \n           subtitle = \"Familia y sociedad en la novela\", \n           palette = pal$cat.awtools.spalette.6[1:2])\n\n\n\n\n\nRepetimos el mismo gráfico, ahora con las categorías de tiempo y espacio:\n\n\nCode\ndicf &lt;- dictionary(\n  list(\n    espacio=c(\"casino\",\"catedral\",\"vivero\",\n              \"casa\",\"espolón\",\"teatro\"),\n    tiempo=c(\"otoño\",\"verano\",\"invierno\",\n             \"primavera\",\"semana santa\",\"navidad\")\n))\n\nplotLexDiv(cp, \n           dicf, \n           title ='La Regenta', \n           subtitle = \"Espacio y tiempo en la novela\", \n           palette = pal$cat.brewer.Dark2.8[c(1:4)])\n\n\n\n\n\nCode\ndicf &lt;- dictionary(\n  list(\n    social=c(\"casino\",\"teatro\",\"espolón\",\n             \"Paseo de Verano\",\"Paseo de los curas\",\n             \"calle\",\"plaza\",\"tertulia\",\"salon\"),\n    religioso=c(\"catedral\",\"capilla\",\"sacristía\",\n                \"claustro\",\"seminario\"),\n    doméstico=c(\"vivero\",\"\\\\bcasa\\\\b\",\"hogar\",\"alcoba\",\n                \"habitación\",\"cama\",\"cocina\",\"despensa\")))\n\nft &lt;- filterWords(cp, dicf)\n\nft$name[ft$name!=\"002 - Prólogo\"] &lt;- paste0(\"Capítulo \",ft$name[ft$name!=\"002 - Prólogo\"])\n\nplotSpike(ft, \n          title = 'Los espacios de \"La Regenta\"', \n          subtitle = \"Gráfico de dispersión léxica para distintos tipos de espacio.\", \n          palette = pal$cat.brewer.Dark2.8[c(1:4)],\n          label.size = 3, \n          line.width = 0.3, \n          ring.col=\"black\")"
  },
  {
    "objectID": "regenta.html#peso-de-los-temas",
    "href": "regenta.html#peso-de-los-temas",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Peso de los temas",
    "text": "Peso de los temas\n\n\nCode\nxy &lt;- countKeywords(cp, \n                    dic, \n                    rel.freq = F, \n                    quietly = TRUE)\n\n# Elimina los términos no encontrados\nxy &lt;- xy[xy$frequency&gt;0,]\n\nxy$groups &lt;- NULL\n\nforceDirectedTree(xy,value_col = \"frequency\",\n                  palette = pal$cat.awtools.bpalette.16, \n                  max.radius = 50, \n                  height = 500)\n\n\n\n\n\n\nlo mismo se puede ver así:\n\n\nCode\nplotVoronoiTree(data = xy,\n                value_col = \"frequency\")\n\n\n\n\n\n\ndd\n\nPersonajes en lugar de temas\nEn primer lugar, creamos un diccionario con los personajes de la novela a partir de la lista de personajes de la novela elaborada por Argüeles (1984).\nJuan Benito Argüelles - Nomina de personajes de “La Regenta”\nhttps://cvc.cervantes.es/literatura/cuadernos_del_norte/pdf/23/23_10.pdf\n\n\nCode\ndich &lt;- dictionary(\n  list(\n    hombres=\n      list(\n           Alvaro=c(\"Álvaro Mesía\",\"Álvaro\",\"Mesía\",\n                    \"presidente del casino\"),\n           Saturnino=c(\"Saturnino Bermúdez\",\"Saturnino\",\n                       \"Bermúdez\",\"Saturno\",\"Saturnillo\"),\n           Fermin=c(\"Magistral\",\"Provisor\",\"Fermín\",\n                    \"De Pas\",\"Fermín de Pas\",\"Magistral\"),\n           Victor=c(\"Víctor\",\"Víctor Quintanar\",\"Quintanar\"),\n           Otros=c(\n                   \"Agustinito\",\"Amadeo\",\"Anacleto\",\n                   \"Anselmo\",\"Antero\",\"Antón Raíces\",\n                   \"Antonio\",\"Barcaza\",\"Basilio\",\n                   \"Bautista\",\"Bedoya\",\"Belisario\",\n                    \"Benítez\",\"Bismark\",\"Campillo\",\n                   \"\\\\b[C]hato\\\\b\",\"don Carlos\",\n                   \"Peláez\",\"Cayetano\",\n                   \"Cayetano Ripamilán\",\"Ripamilán\",\n                   \"Celedonio\",\"Colás\",\"marqués de Corujedo\",\n                   \"Frígilis\",\"Crespo\",\"Custodio\",\n                   \"Olías de Cuervo\",\"señor Cuervo\",\n                   \"Diego\",\"Escosura\",\"\\\\b[E]studiante\\\\b\",\n                   \"Pepe\",\"Trabuco\",\"Foja\",\"Fortunato\",\n                   \"Francisco de Asís\",\"Francisco de Pas\",\n                   \"Francisco de Osuna\",\"Francisco Páez\", \n                   \"señor Páez\", \"señor de Páez\",\n                   \"Francisco Carraspique\",\"Froilán\",\n                   \"don Frutos\",\"Frutos Redondo\",\"Fulgosio\",\n                   \"Germán\",\"Glocester\",\"Restituto\",\n                   \"señor Infanzón\", \"el Infanzón\",\n                   \"Iriarte\",\"Joaquinito\",\"Juanito\",\n                   \"Leando\",\"Maroto\",\"marqués de Vegallana\",\n                   \"\\\\s{1}[M]arqués\\\\b\",\"Martínez\",\n                   \"Matías\",\"Matiella\",\"monaguillo\",\n                   \"señor Orgaz\",\"\\\\b[P]alma\\\\b\",\n                   \"Paco\",\"Paquito\",\"Palomo\",\n                   \"Rodríguez\",\"Parcerisa\",\"Pedro\",\n                   \"\\\\b[P]erales\\\\b\",\"Pinón\",\n                   \"Pompeyo\",\"Pompeyo Guimarán\",\"Guimarán\",\n                   \"Robustiano\",\"señor Roque\",\n                   \"Rosendo\",\"don Santos\",\"Sousa\",\n                   \"Trifón\",\"\\\\b[V]inagre\\\\b\",\n                   \"Vinculete\")\n           ),\n    mujeres=\n      list(\n        Ana=c(\"Ana\",\"Anita\",\"Regenta\"),\n        Obdulia=c(\"Obdulia\",\"Obdulia Fandiño\",\n                  \"Fandiño\",\"Obdulita\"),\n        Otras=c(\n                \"Agapita\",\"Águeda\",\"Angelina\",\n                \"Anuncita\",\"doña Anuncia\",\"Camila\",\n                \"Carolina\",\"Señora de Infanzón\", \"la Infanzón\",\n                \"Celestina\",\"Edelmira\",\"Emma\",\n                \"Fabiolita\",\"Fulgencia\",\"Gertrudis\",\n                \"la González\",\"Juana\",\"Lola\",\n                \"doña Lucía\",\"marquesa\",\"Rufina\",\n                \"Olvido\",\"doña Paula\",\"Pepa\",\n                \"Guimarán, Perpétua\",\"\\\\b[P]ilar\\\\b\",\n                \"Petra\",\"doña Petronila\",\"Ramona\",\n                \"\\\\bRita\\\\b\",\"\\\\bRosa\\\\b\",\"Rosita\",\n                \"Rudesinda\",\"Servanda\",\"Társila\",\n                \"\\\\b[T]eresa\\\\b\",\"Teresina\",\n                \"Úrsula\",\"Visitación\",\"\\\\b[V]isita\\\\b\",\n                \"viuda del marqués de Corujedo\")\n        )\n  )\n)\n\n\n\n\nxp &lt;- countKeywords(cp, \n                    dich, \n                    rel.freq = F, \n                    group.var = \"capitulo\",\n                    quietly = TRUE)\n\n# Agrega los resultados por los dos niveles\n# de código del diccionario\nxx &lt;- aggregate(list(frequency=xp$frequency), \n                by=list(groups=xp$groups, \n                        level1=xp$level2), \n                sum, na.rm=T)\n\n# Elimina los términos no encontrados\n# en el corpus\nxx &lt;- xx[xx$frequency&gt;0,]\n\n# Ordena por capítulo\nxx &lt;- xx[order(xx$groups),]\n\nplotSankey(xx, \n           from = \"level1\", \n           to=\"groups\", \n           value = \"frequency\", \n           opacity = 0.05)\n\n\n\n\n\n\n\n\nCode\nplotStream(xx, \n           x=\"groups\",\n           y=\"frequency\", \n           group=\"level1\",\n           palette=pal$cat.ggsci.simpsons.16)"
  },
  {
    "objectID": "regenta.html#distribución-de-personajes-por-capítulo",
    "href": "regenta.html#distribución-de-personajes-por-capítulo",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Distribución de personajes por capítulo",
    "text": "Distribución de personajes por capítulo\nJuan Benito Argüelles - Nomina de personajes de “La Regenta”\nhttps://cvc.cervantes.es/literatura/cuadernos_del_norte/pdf/23/23_10.pdf\n\n\nCode\ndich &lt;- dictionary(\n  list(\n    hombres=\n      list(\n           Alvaro=c(\"Álvaro Mesía\",\"Álvaro\",\"Mesía\",\n                    \"presidente del casino\"),\n           Saturnino=c(\"Saturnino Bermúdez\",\"Saturnino\",\n                       \"Bermúdez\",\"Saturno\",\"Saturnillo\"),\n           Fermin=c(\"Magistral\",\"Provisor\",\"Fermín\",\n                    \"De Pas\",\"Fermín de Pas\",\"Magistral\"),\n           Victor=c(\"Víctor\",\"Víctor Quintanar\",\"Quintanar\"),\n           Otros=c(\n                   \"Agustinito\",\"Amadeo\",\"Anacleto\",\n                   \"Anselmo\",\"Antero\",\"Antón Raíces\",\n                   \"Antonio\",\"Barcaza\",\"Basilio\",\n                   \"Bautista\",\"Bedoya\",\"Belisario\",\n                    \"Benítez\",\"Bismark\",\"Campillo\",\n                   \"\\\\b[C]hato\\\\b\",\"don Carlos\",\n                   \"Peláez\",\"Cayetano\",\n                   \"Cayetano Ripamilán\",\"Ripamilán\",\n                   \"Celedonio\",\"Colás\",\"marqués de Corujedo\",\n                   \"Frígilis\",\"Crespo\",\"Custodio\",\n                   \"Olías de Cuervo\",\"señor Cuervo\",\n                   \"Diego\",\"Escosura\",\"\\\\b[E]studiante\\\\b\",\n                   \"Pepe\",\"Trabuco\",\"Foja\",\"Fortunato\",\n                   \"Francisco de Asís\",\"Francisco de Pas\",\n                   \"Francisco de Osuna\",\"Francisco Páez\", \n                   \"señor Páez\", \"señor de Páez\",\n                   \"Francisco Carraspique\",\"Froilán\",\n                   \"don Frutos\",\"Frutos Redondo\",\"Fulgosio\",\n                   \"Germán\",\"Glocester\",\"Restituto\",\n                   \"señor Infanzón\", \"el Infanzón\",\n                   \"Iriarte\",\"Joaquinito\",\"Juanito\",\n                   \"Leando\",\"Maroto\",\"marqués de Vegallana\",\n                   \"\\\\s{1}[M]arqués\\\\b\",\"Martínez\",\n                   \"Matías\",\"Matiella\",\"monaguillo\",\n                   \"señor Orgaz\",\"\\\\b[P]alma\\\\b\",\n                   \"Paco\",\"Paquito\",\"Palomo\",\n                   \"Rodríguez\",\"Parcerisa\",\"Pedro\",\n                   \"\\\\b[P]erales\\\\b\",\"Pinón\",\n                   \"Pompeyo\",\"Pompeyo Guimarán\",\"Guimarán\",\n                   \"Robustiano\",\"señor Roque\",\n                   \"Rosendo\",\"don Santos\",\"Sousa\",\n                   \"Trifón\",\"\\\\b[V]inagre\\\\b\",\n                   \"Vinculete\")\n           ),\n    mujeres=\n      list(\n        Ana=c(\"Ana\",\"Anita\",\"Regenta\"),\n        Obdulia=c(\"Obdulia\",\"Obdulia Fandiño\",\n                  \"Fandiño\",\"Obdulita\"),\n        Otras=c(\n                \"Agapita\",\"Águeda\",\"Angelina\",\n                \"Anuncita\",\"doña Anuncia\",\"Camila\",\n                \"Carolina\",\"Señora de Infanzón\", \"la Infanzón\",\n                \"Celestina\",\"Edelmira\",\"Emma\",\n                \"Fabiolita\",\"Fulgencia\",\"Gertrudis\",\n                \"la González\",\"Juana\",\"Lola\",\n                \"doña Lucía\",\"marquesa\",\"Rufina\",\n                \"Olvido\",\"doña Paula\",\"Pepa\",\n                \"Guimarán, Perpétua\",\"\\\\b[P]ilar\\\\b\",\n                \"Petra\",\"doña Petronila\",\"Ramona\",\n                \"\\\\bRita\\\\b\",\"\\\\bRosa\\\\b\",\"Rosita\",\n                \"Rudesinda\",\"Servanda\",\"Társila\",\n                \"\\\\b[T]eresa\\\\b\",\"Teresina\",\n                \"Úrsula\",\"Visitación\",\"\\\\b[V]isita\\\\b\",\n                \"viuda del marqués de Corujedo\")\n    )\n  )\n)\n\n\n\n\nxp &lt;- countKeywords(cp, \n                    dich, \n                    rel.freq = F, \n                    group.var = \"capitulo\",\n                    quietly = TRUE)\n\n# Agrega los resultados por los dos niveles\n# de código del diccionario\nxx &lt;- aggregate(list(frequency=xp$frequency), \n                by=list(groups=xp$groups, \n                        level1=xp$level2), \n                sum, na.rm=T)\n\n# Elimina los términos no encontrados\n# en el corpus\nxx &lt;- xx[xx$frequency&gt;0,]\n\n# Ordena por capítulo\nxx &lt;- xx[order(xx$groups),]\n\nplotSankey(xx, \n           from = \"level1\", \n           to=\"groups\", \n           value = \"frequency\", \n           opacity = 0.05)\n\n\n\n\n\n\n\n\nCode\nplotStream(xx, \n           x=\"groups\",\n           y=\"frequency\", \n           group=\"level1\",\n           palette=pal$cat.ggsci.simpsons.16)"
  },
  {
    "objectID": "regenta.html#asociación-entre-temas-y-personajes",
    "href": "regenta.html#asociación-entre-temas-y-personajes",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Asociación entre temas y personajes",
    "text": "Asociación entre temas y personajes\n\n\nCode\n# Reorganiza el corpus según\n# sentencias o frases\ncs &lt;- corpus_reshape(cp, \"sentences\")\n\n# Calcula la frecuencia en la\n# que dos codigos del mismo \n# diccionario aparecen juntos\n# en cada frase\nd1 &lt;- matchCodes(cs, \n                dic, \n                level = 1, \n                quietly=TRUE)\n\n# Ordena los resultados de mayor a menor\nd1 &lt;- d1[order(d1$value, decreasing = T),]\n\n\nplotChord(d1, \n          from = \"term1\", \n          to =\"term2\", \n          value= \"value\")\n\n\n\n\n\n\nAhora con los personajes\nCreamos un diccionario con todos los personajes sin agregar.\n\n\nCode\n# diccionario de personajes\n# sin agregar en una categoría\n# otros y otras\ndic.per &lt;- dictionary(\n  list(\n    hombres=\n      list(\n        Alvaro=c(\"Álvaro Mesía\",\n                 \"Álvaro\",\n                 \"Mesía\",\n                 \"presidente del casino\"),\n        Saturnino=c(\"Saturnino Bermúdez\",\n                    \"Saturnino\",\n                    \"Bermúdez\",\n                    \"Saturno\",\n                    \"Saturnillo\"),\n        Fermin=c(\"Magistral\",\n                 \"Provisor\",\n                 \"Fermín\",\n                 \"De Pas\",\n                 \"Fermín de Pas\",\n                 \"Magistral\"),\n        Victor=c(\"Víctor\",\n                 \"Víctor Quintanar\",\n                 \"Quintanar\"),\n        Agustinito=\"Agustinito\",\n        Amadeo=\"Amadeo\",\n        Anacleto=\"Anacleto\",\n        Anselmo=\"Anselmo\",\n        Antero=\"Antero\",\n        Antón=\"Antón Raíces\",\n        Antonio=\"Antonio\",\n        Barcaza=\"Barcaza\",\n        Basilio=\"Basilio\",\n        Bautista=\"Bautista\",\n        Bedoya=\"Bedoya\",\n        Belisario=\"Belisario\",\n        Benítez=\"Benítez\",\n        Bismark=\"Bismark\",\n        Campillo=c(\"Campillo\",\"\\\\b[C]hato\\\\b\"),\n        Carlos=\"Carlos\",\n        Pelaez=\"Peláez\",\n        Ripamilan=c(\"Cayetano\",\n                    \"Cayetano Ripamilán\",\n                    \"Ripamilán\"),\n        Celedonio=\"Celedonio\",\n        Colás=\"Colás\",\n        Corujedo=\"marqués de Corujedo\",\n        Frígilis=c(\"Frígilis\",\"Crespo\"),\n        Custodio=c(\"Custodio\"),\n        Cuervo=c(\"Olías de Cuervo\",\"señor Cuervo\"),\n        Diego=\"Diego\",\n        Escosura=\"Escosura\",\n        Estudiante=c(\"\\\\b[E]studiante\\\\b\",\"Pepe\",\"Trabuco\"),\n        Foja=\"Foja\",\n        Fortunato=\"Fortunato\",\n        \"Francisco de Asís\"=\"Francisco de Asís\",\n        \"Francisco de Pas\"=\"Francisco de Pas\",\n        \"Francisco de Osuma\"=\"Francisco de Osuna\",\n        Páez=c(\"Francisco Páez\", \"señor Páez\", \"señor de Páez\"),\n        \"Francisco Carraspique\"=\"Francisco Carraspique\",\n        Froilán=\"Froilán\",\n        Frutos=c(\"don Frutos\",\"Frutos Redondo\"),\n        Fulgosio=\"Fulgosio\",\n        Germán=\"Germán\",\n        Glocester=c(\"Glocester\",\"Restituto\"),\n        Infanzón=c(\"señor Infanzón\", \"el Infanzón\"),\n        Iriarte=\"Iriarte\",\n        Joaquinito=\"Joaquinito\",\n        Juanito=\"Juanito\",\n        Leandro=\"Leando\",\n        Maroto=\"Maroto\",\n        Vegallana=c(\"marqués de Vegallana\",\"\\\\s{1}[M]arqués\\\\b\"),\n        Martínez=\"Martínez\",\n        Matías=\"Matías\",\n        Matiella=\"Matiella\",\n        monaguillo=\"monaguillo\",\n        \"señor Orgaz\"=\"señor Orgaz\",\n        Palma=\"\\\\b[P]alma\\\\b\",\n        Paquito=c(\"Paco\",\"Paquito\"),\n        Palomo=c(\"Palomo\",\"Rodríguez\"),\n        Parcerisa=\"Parcerisa\",\n        Pedro=\"Pedro\",\n        Perales=\"\\\\b[P]erales\\\\b\",\n        Pinón=\"Pinón\",\n        Pompeyo=c(\"Pompeyo\",\"Pompeyo Guimarán\",\"Guimarán\"),\n        Robustiano=\"Robustiano\",\n        Roque=\"señor Roque\",\n        Rosendo=\"Rosendo\",\n        Santos=\"don Santos\",\n        Sousa=\"Sousa\",\n        Trifón=\"Trifón\",\n        Vinagre=\"\\\\b[V]inagre\\\\b\",\n        Vinculete=\"Vinculete\"\n        ),\n    mujeres=\n      list(\n        Ana=c(\"Ana\",\n              \"Anita\",\n              \"Regenta\"),\n        Obdulia=c(\"Obdulia\",\n                  \"Obdulia Fandiño\",\n                  \"Fandiño\",\n                  \"Obdulita\"),\n        Agapita=\"Agapita\",\n        Águeda=\"Águeda\",\n        Angelina=\"Angelina\",\n        Anunciación=c(\"Anuncita\",\"doña Anuncia\"),\n        Camila=\"Camila\",\n        Carolina=c(\"Carolina\",\"Señora de Infanzón\", \"la Infanzón\"),\n        Celestina=\"Celestina\",\n        Edelmira=\"Edelmira\",\n        Emma=\"Emma\",\n        Fabiolita=\"Fabiolita\",\n        Fulgencia=\"Fulgencia\",\n        Gertrudis=\"Gertrudis\",\n        \"La González\"=\"la González\",\n        Juana=\"Juana\",\n        Lola=\"Lola\",\n        Lucía=\"doña Lucía\",\n        Marquesa=c(\"marquesa\",\"Rufina\"),\n        Olvido=\"Olvido\",\n        Paula=\"doña Paula\",\n        Pepa=\"Pepa\",\n        Perpétua=\"Guimarán, Perpétua\",\n        Pilar=\"\\\\b[P]ilar\\\\b\",\n        Petra=\"Petra\",\n        Petrolina=\"doña Petronila\",\n        Ramona=\"Ramona\",\n        Rita=\"\\\\bRita\\\\b\",\n        Rosa=\"\\\\bRosa\\\\b\",\n        Rosita=\"Rosita\",\n        Rudesinda=\"Rudesinda\",\n        Servanda=\"Servanda\",\n        Társila=\"Társila\",\n        Teresa=\"\\\\b[T]eresa\\\\b\",\n        Teresina=\"Teresina\",\n        Úrsula=\"Úrsula\",\n        Visita=c(\"Visitación\",\"\\\\b[V]isita\\\\b\"),\n        \"Viuda de Corujedo\"=\"viuda del marqués de Corujedo\"\n        )\n  )\n)\n\n\n\n\nCode\n# Emplea el corpus organizado\n# según párrafos\ncpp &lt;- corpus(regp, \n              text_field = \"texto\")\n\n# Calcula la frecuencia en la\n# que dos códigos del mismo \n# diccionario aparecen juntos\n# en cada párrafo\nd1 &lt;- matchCodes(cpp, \n                 dic.per, \n                 level = 2, \n                 quietly=TRUE)\n\n# Ordena los resultados de mayor a menor\nd1 &lt;- d1[order(d1$value, decreasing = T),]\n\n# Elimina las asociaciones con Ana\nd1 &lt;- d1[d1$term1!=\"Ana\",]\nd1 &lt;- d1[d1$term2!=\"Ana\",]\n\n# Genera un gráfico de cuerdas\n# para visualizar las asociaciones\nplotChord(d1, \n          from = \"term1\", \n          to =\"term2\", \n          value= \"value\", \n          elementId = \"chord3\")\n\n\n\n\n\n\n\n\nCode\nnn &lt;- data.frame()\n\nfor(i in 1:30){\n  \n  c1 &lt;- cp[i]\n  \n  c1 &lt;- corpus_reshape(c1, to=\"paragraphs\")\n  \n  d1 &lt;- matchCodes(c1, \n                   dic.per, \n                   level = 2, \n                   quietly=TRUE)\n  \n  d1 &lt;- d1[d1$term1!=\"Ana\",]\n  d1 &lt;- d1[d1$term2!=\"Ana\",]\n\n  d1$capitulo &lt;- i\n  \n  d1 &lt;- d1[order(d1$value, decreasing = T),]\n  \n  nn&lt;- rbind(nn, d1)\n  \n}\n\n\n\nlibrary(network)\nlibrary(sna)\nlibrary(ggnetwork)\n\npx &lt;- list()\n\nfor(i in 1:30){\n\n  n1 &lt;- network(nn[nn$capitulo==i,], \n                directed = F)\n  \n  gn &lt;- ggnetwork(n1, \n                  layout = \"kamadakawai\", \n                  cell.jitter = 0.75)\n\n  p &lt;- ggplot(gn, \n              aes(x = x, \n                  y = y, \n                  xend = xend, \n                  yend = yend)) +\n          geom_edges(\n                color = \"grey90\",\n                aes(size=value), \n                curvature=0.25) +\n        geom_edges(\n                size=0.1, \n                curvature=0.25, \n                color=\"purple\") +\n          geom_nodetext(\n                aes(label = vertex.names),\n                fontface = \"bold\")+\n          theme_blank()+\n          labs(title=paste0(\"**Capítulo \",i,\"**\"))+\n          theme(plot.title = \n                  ggtext::element_markdown(\n                          size=15, \n                          color=\"darkgreen\"), \n                legend.position = \"none\",\n                plot.margin=grid::unit(\n                  c(0.75,0.75,0.75,0.75), \n                  \"cm\"))\n\n  px[[i]] &lt;- p\n\n}\n\nlibrary(egg)\n\nggarrange(plots=px, \n          ncol=3, \n          nrow=10)"
  },
  {
    "objectID": "regenta.html#análisis-de-conglomerados",
    "href": "regenta.html#análisis-de-conglomerados",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Análisis de conglomerados",
    "text": "Análisis de conglomerados\n\n\nCode\ntk &lt;- tokens(cp, \n             remove_punct = T, \n             remove_numbers = T, \n             remove_separators = T, \n             remove_symbols = T)\n\ntk &lt;- tokens_remove(tk, \n                    pattern=stopwords(\"es\"))\n\ndtm &lt;- dfm(tk)\n\nlibrary(quanteda.textstats)\n\ntstat_dist &lt;- as.dist(textstat_dist(dtm))\nclust &lt;- hclust(tstat_dist)\n\nplot(clust, xlab = \"Distance\", ylab = NULL)"
  },
  {
    "objectID": "regenta.html#escalonado-de-textos-wordfish",
    "href": "regenta.html#escalonado-de-textos-wordfish",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Escalonado de textos: Wordfish",
    "text": "Escalonado de textos: Wordfish\n\n\nCode\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(ggplot2)\n\nwf &lt;- textmodel_wordfish(dtm)\n\ntextplot_scale1d(wf) +\n  geom_hline(yintercept = 0, \n             linetype = \"dashed\",\n             color=\"red3\")\n\n\n\n\n\nEsta escala se podría interpretar de distintas maneras. Una de ellas es que los capítulos situados más a la izquierda representan una mayor intensidad de la vida social de Vetusta, mientras que aquellos más a la derecha se relacionan con la vida privada, íntima y la infancia de La Regenta.\nTambién podríamos leer los resultados de acuerdo con el protagonismo o mayor centralidad de ciertos personajes según el punto de la escala. Más a la izquierda predominan los Marqueses, Álvaro Mesía (antes de su relación con Ana Ozores) y la sociedad vetustense. En el centro se sitúa Fermín de Pas, que se interpone entre la vida privada de Ana y la vida en sociedad. En la derecha encontramos a Víctor, su esposo, Álvaro (hechos consumados) y en el extremo, la familia de Ana, especialmente en su infancia.\nDe todas formas, ambas interpretaciones sugieren una dualidad entre la vida íntima y relativamente reservada de Ana en contraste con la vida social y pública de Vetusta. Los dos mundos se tocan en ocasiones concretas por intermedio de algunos actores que transitan dentre ellos, como Fermín de Pas o Álvaro Mesía."
  },
  {
    "objectID": "regenta.html#análisis-de-palabras-clave",
    "href": "regenta.html#análisis-de-palabras-clave",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Análisis de palabras-clave",
    "text": "Análisis de palabras-clave\nKeynness"
  },
  {
    "objectID": "regenta.html#palabras-clave",
    "href": "regenta.html#palabras-clave",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Palabras-clave",
    "text": "Palabras-clave\nkwic\n\n\nCode\nlibrary(quanteda)\n\nkw_amor &lt;- kwic(tk, pattern =  \"adulterio\")\n\nreactable(kw_amor, resizable = TRUE, wrap=F)\n\n\n\n\n\n\n\nVisualización con un árbol de palabras\n\n\nCode\nlibrary(tenet)\n\n\nwordtree(cp, \"adulterio\")"
  },
  {
    "objectID": "regenta.html#codificación-temática",
    "href": "regenta.html#codificación-temática",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Codificación temática",
    "text": "Codificación temática\nEntendemos por codificación temática el proceso de análisis de un texto con el propósito de identificar ideas, conceptos y temas recurrentes. Se utiliza de forma amplia en las ciencias sociales, como la sociología o la antropología, para analizar entrevistas, encuestas o documentos. En este caso, vamos a emplear la codificación temática para identificar los temas y conceptos que aparecen en la novela.\nComo temas, por ejemplo, podemos tener el tiempo (las estaciones del año, el paso del tiempo, el momento del día, las fiestas religiosas), el espacio (el hogar, los ambientes de interacción social, la iglesia), la familia (los padres, los hijos, los hermanos), la sociedad (los nobles, los plebeyos, los campesinos), entre otros.\nLa forma más tradicional de codificación temática consiste en imprimir los documentos, leerlos detenidamente y realizar marcas o anotaciones en los márgenes. Sin embargo, en la era digital, podemos emplear herramientas de análisis de texto que nos ayudan a llevar a cabo esta tarea de forma más rápida y eficiente. Los diccionarios (o léxicos) son una de las más comunes.\n\nEl uso de diccionarios\nUn diccionario corresponde a un conjunto de palabras clave asociados a un tema. Por ejemplo, cuando pienso en la familia, me vienen a la mente palabras como “padre”, “madre”, “hijo”, “hermano”, “hermana”,“tío”, “tía”, “abuelo”, “abuela”. Algunos más radicales incluirían los cuñados y parientes más lejanos. Si lo expresara de forma algorítmica sería algo así:\nfamilia = c(“padre”, “madre”, “hijo”, “hermano”, “hermana”, “tío”, “tía”, “abuelo”, “abuela”)\nAl buscar esas palabras en uno o varios textos, sabré que se menciona de alguna manera la familia y, principalmente, dónde y cuántas veces.\nAbajo hemos creado un diccionario con palabras clave asociadas a diferentes temas. En este caso, hemos considerado la familia, la sociedad, la iglesia, la economía, los sentimientos, el misticismo, el adulterio, el espacio y el tiempo.\nLuego, utilizo la función tagCorpus del paquete tenet para etiquetar de forma automática los textos con las palabras clave del diccionario frase a frase. Este procedimiento también me dice cuál es la categoría o tema más importante encontrado en la frase, cuáles son todos los temas encontrados, la cantidad de categorías y el número de palabras clave coincidentes. También permite filtrar y reordenar los resultados.\n\n\nCode\n# Crea un diccionario con palabras clave\n# sobre algunos temas de interés en la\n# novela\ndic &lt;- dictionary(\n  list(\n    familia=c(\"padre\", \"madre\", \"hijo\", \"hija\", \n              \"hermano\", \"hermana\"),\n    sociedad=c(\"vetustense\",\"puebl\",\"ciudad\",\"conversa\",\n               \"amig\",\"noble\",\"arist\"),\n    iglesia=c(\"cura\",\"obispo\",\"sacerdo\",\"confesión\",\n              \"religión\",\"religios\",\"canónig\",\"capilla\"),\n    economia=c(\"dinero\",\"deuda\",\"negoci\",\"trabaj\",\n               \"fortuna\",\"\\\\brico\",\"\\\\brica\"),\n    sentimientos=c(\"culpa\",\"alegr\",\"\\\\bamor\\\\b\",\"remordimiento\",\n                   \"ridículo\",\"vergüenza\",\"triste\"),\n    misticismo=c(\"Fermín de Pas\",\"Fermín\",\"\\\\bde Pas\\\\b\",\n                 \"magistral\", \"espirit\",\"dios\"),\n    adulterio=c(\"Álvaro\",\"Mesía\",\"adulte\",\"amante\",\n                \"Presidente del\", \"marido\", \n                \"placer\", \"pasión\", \"amante\",\"amorío\"),\n    espacio=c(\"casino\",\"catedral\",\"vivero\",\"\\\\bcasa\\\\b\",\n              \"espolón\",\"teatro\"),\n    tiempo=c(\"otoño\",\"verano\",\"invierno\",\"primavera\",\n             \"semana santa\",\"navidad\",\"\\\\bdía\\\\b\",\"noche\",\n             \"tarde\",\"la mañana\",\"madrugada\")\n  )\n)\n    \n# Carga el paquete tenet\nlibrary(tenet)\n\n# Genera el etiquetado de \n# las frases según el diccionario\ntagCorpus(cp, \n          dic, \n          reshape.to = \"sentence\", \n          defaultPageSize = 3)\n\n\n\n\n\n\n\n\nEl resultado son frases palabras pintadas de distintos colores de acuerdo con los temas a que pertenecen, como si hubiesen sido resaltadas con un marcador. De ese modo, se pude realizar una lectura rápida y visual de la incidencia de los temas en el texto, manteniendo todo el contexto de la obra.\n\n\nUbicación de temas en el texto\nLa tabla anterior resulta muy útil si queremos examinar las palabras en su contexto y regresar al documento para entender mejor cómo se utilizan. Sin embargo, si queremos tener una visión general de la distribución de los temas en el texto, podemos utilizar un gráfico de dispersión léxica. Se trata de una técnica de visualización de datos que representa un texto como un intervalor cortado por puntos o líneas verticales que corresponden a las palabras clave encontradas.\nLa función plotLexDiv del paquete tenet permite generar un gráfico de dispersión léxica que muestra la distribución de las palabras clave en el texto coloreadas por tema del diccionario. No se recomienda utilizar muchas categorías en un solo gráfico, puesto que la visualización se vuelve confusa y resulta muy difícil identificar patrones.\nEl siguiente código genera un gráfico de dispersión léxica, utilizando un diccionario con palabras clave asociadas a los temas de espacio y tiempo.\n\n\nCode\n# Crea un diccionario solo\n# con dos temas: espacio y tiempo\ndicf &lt;- dictionary(\n  list(\n    espacio=c(\"casino\",\"catedral\",\"vivero\",\n              \"casa\",\"espolón\",\"teatro\",\n              \"calle\",\"plaza\",\"Paseo de Verano\",\n              \"salón\",\"tertulia\"),\n    tiempo=c(\"otoño\",\"verano\",\"invierno\",\"primavera\",\n             \"semana santa\",\"navidad\",\"\\\\bdía\\\\b\",\"noche\",\n             \"tarde\",\"la mañana\",\"madrugada\")\n))\n\n# Crea el gráfico de dispersión\n# léxica\nplotLexDiv(cp, \n           dicf, \n           title ='La Regenta', \n           subtitle = \"Espacio y tiempo en la novela\", \n           palette = pal$cat.brewer.Dark2.8[c(1:4)])\n\n\n\n\n\n\nComo podemos observar, las palabras clave relacionadas al espacio y tiempo se intercalan sin presentar un patrón claro. Por ello, sería útil realizar un análisis más detallado de los espacios (y de los tiempos) mencionados en la novela. Para ello, podemos utilizar la función filterWords del paquete tenet para seleccionar solo las palabras clave relacionadas al espacio y generar un gráfico de dispersión léxica interactivo que muestre la distribución de estos términos en el texto empleando la función plotSpike.\nCreamos un nuevo diccionario con tres categorías analíticas del espacio: social, religioso y doméstico. El primer tipo reúne aquellos lugares de encuentro y diversión, como casinos, teatros y salones donde se da la interacción de los personajes nobles y de alta sociedad.\nEl segundo se encuentra representado por los lugares de culto, como catedrales y capillas. Son parte de los dominios de Fermín de Pas y su importancia en la trama viene de la fe que confesa Ana y su relación con el misticismo.\nEl tercero congrega el ambiente doméstico de carácter íntimo. Son lugares de vida cotidiana, como la casa, las habitaciones, la alcoba y las cocinas. Muchas de las escenas de la novela transcurren en estos espacios, donde se reflejan las angustias de Ana, como la expresión y transgresión de la intimidad del hogar.\n\n\nCode\n# Crea un diccionario solo sobre espacio,\n# con subcategorías más detalladas\ndicf &lt;- dictionary(\n  list(\n    social=c(\"casino\",\"teatro\",\"espolón\",\n             \"Paseo de Verano\",\"Paseo de los curas\",\n             \"calle\",\"plaza\",\"tertulia\",\"salon\"),\n    religioso=c(\"catedral\",\"capilla\",\"sacristía\",\n                \"claustro\",\"seminario\"),\n    doméstico=c(\"vivero\",\"\\\\bcasa\\\\b\",\"hogar\",\"alcoba\",\n                \"habitación\",\"cama\",\"cocina\",\"despensa\")))\n\n# Filtra las palabras clave empleando\n# el nuevo diccionario\nft &lt;- filterWords(cp, dicf)\n\n# Añade la palabra capítulo al número\n# de los capítulos para facilitar la\n# lectura de los datos\nft$name &lt;- paste0(\"Capítulo \",ft$name)\n\n# Genera el gráfico de dispersión léxica\n# circular interactivo\nplotSpike(ft, \n          title = 'Los espacios de \"La Regenta\"', \n          subtitle = \"Gráfico de dispersión léxica para distintos tipos de espacio.\", \n          palette = pal$cat.brewer.Dark2.8[c(1:4)],\n          label.size = 3, \n          line.width = 0.3, \n          ring.col=\"black\")\n\n\n\n\n\n\n\nAhora, los patrones quedan mucho más evidentes. Los espacios religiosos se destacan en los dos primeros capítulos de forma clara, así como en el capítulo 23. Además, es ahí donde termina la novela. Los ambientes domésticos, predominantes en los pasajes dedicados a la interacción con Ana, que se alternan con los espacios “sociales” en los que se desenvuelve la vida de la ciudad y de los demás personajes.\n\n\nPeso de los temas\n¿Cuál la importancia de cada tema en la obra? Para responder a esta pregunta, podemos calcular la prevalencia de los temas en el texto. El peso de un tema se calcula de dos maneras:\n\npor la frecuencia absoluta - que consiste en solamente contar el número de palabras clave asociadas a ese tema en el texto; o\npor la frecuencia relativa - obtenida dividiendo el número de palabras clave asociadas a ese tema por el número total de palabras en el texto. En ese sentido, representa una medida de densidad del tema.\n\nMientras que la frecuencia absoluta nos da una idea de la cantidad de veces que un tema es mencionado, la frecuencia relativa nos permite comparar la importancia de los temas en textos de diferente longitud.\n\n\nCode\n# La función countKeywords\n# cuenta las palabras clave de un\n# diccionario en un texto\nxy &lt;- countKeywords(cp, \n                    dic, \n                    rel.freq = F, \n                    quietly = TRUE)\n\n# Elimina los términos no encontrados\nxy &lt;- xy[xy$frequency&gt;0,]\n\n# Elimina la variable de grupos\n# (no hay grupos en este caso)\nxy$groups &lt;- NULL\n\n# Muestra los resultados\nreactable(xy, resizable = TRUE)\n\n\n\n\n\n\n\n\nSi ordenamos los valores de la frecuencia del mayor al menor, vemos que el misticismo y el adulterio aparecen entre los más frecuentes. El primero, por la presencia de Fermín de Pas y su relación con Ana, y el segundo, por la trama principal de la novela. El espacio de la casa también es relevante.\nSin embargo, la tabla no contiene información agregada por tema. Podríamos utilizar una función en R para agregar los resultados o emplear diferentes técnicas de visualización para comparar los temas. En este caso, utilizaremos un gráfico de redes jerárquicas para visualizar la relación entre los temas y su frecuencia en el texto.\n\n\nCode\n# Crea una red de temas con\n# los resultados obtenidos\nforceDirectedTree(xy,\n                  value_col = \"frequency\",\n                  max.radius = 60,\n                  height=500)\n\n\n\n\n\n\n\nVemos círculos de distintos tamaños en el gráfico. Representan los grandes temas y su tamaño indica su peso en la novela. Cada uno posee un conjunto de otros círculos más pequeños de mismo color que indican la importancia de cada palabra clave dentro del tema. Así que el “Misticismo”, por ejemplo, aparece como el tema más relevante y “Magistral”, “Diós” y “Fermín” como sus palabras clave centrales. La economía, por otra parte, parece no importar mucho en Vetusta.\nOtra manera de visualizar los mismos datos es a través de un treemap. En este caso, los temas se representan como rectángulos de distintos tamaños y colores, donde el tamaño indica la importancia del tema y el color, su relación con otros temas. El gráfico abajo es una versión modificada que emplea el algoritmo de Voronoi para distribuir las áreas de forma precisa, pero con formas más libres, incluso no rectangulares. Se llama Voronoi Tree.\n\n\nCode\n# Gráfico de Voronoi\nplotVoronoiTree(data = xy,\n                value_col = \"frequency\")\n\n\n\n\n\n\n\nLa diferencia central entre este último gráfico y el anterior se encuentra en el hecho de que la atención está centrada en la contribución de las palabras clave en la composición de cada tema. El la visualización anterior, el foco estaba en el peso relativo de los temas mucho más que en sus componentes empíricos concretos.\n\n\nPersonajes en lugar de temas\n¿Qué tal si analizamos los personajes en lugar de los temas? ¿Cómo se distribuyen en la novela? ¿Cuál es su importancia relativa? Para responder a estas preguntas, podemos emplear la misma lógica de análisis de temas, pero aplicada a los personajes.\nEn primer lugar, creamos un diccionario con los personajes de la novela a partir de la nómina de personajes de la novela elaborada por Argüeles (1984).\n\n\nCode\ndich &lt;- dictionary(\n  list(\n    hombres=\n      list(\n           Alvaro=c(\"Álvaro Mesía\",\"Álvaro\",\"Mesía\",\n                    \"presidente del casino\"),\n           Saturnino=c(\"Saturnino Bermúdez\",\"Saturnino\",\n                       \"Bermúdez\",\"Saturno\",\"Saturnillo\"),\n           Fermin=c(\"Magistral\",\"Provisor\",\"Fermín\",\n                    \"De Pas\",\"Fermín de Pas\",\"Magistral\"),\n           Victor=c(\"Víctor\",\"Víctor Quintanar\",\"Quintanar\"),\n           Otros=c(\n                   \"Agustinito\",\"Amadeo\",\"Anacleto\",\n                   \"Anselmo\",\"Antero\",\"Antón Raíces\",\n                   \"Antonio\",\"Barcaza\",\"Basilio\",\n                   \"Bautista\",\"Bedoya\",\"Belisario\",\n                    \"Benítez\",\"Bismark\",\"Campillo\",\n                   \"\\\\b[C]hato\\\\b\",\"don Carlos\",\n                   \"Peláez\",\"Cayetano\",\n                   \"Cayetano Ripamilán\",\"Ripamilán\",\n                   \"Celedonio\",\"Colás\",\"marqués de Corujedo\",\n                   \"Frígilis\",\"Crespo\",\"Custodio\",\n                   \"Olías de Cuervo\",\"señor Cuervo\",\n                   \"Diego\",\"Escosura\",\"\\\\b[E]studiante\\\\b\",\n                   \"Pepe\",\"Trabuco\",\"Foja\",\"Fortunato\",\n                   \"Francisco de Asís\",\"Francisco de Pas\",\n                   \"Francisco de Osuna\",\"Francisco Páez\", \n                   \"señor Páez\", \"señor de Páez\",\n                   \"Francisco Carraspique\",\"Froilán\",\n                   \"don Frutos\",\"Frutos Redondo\",\"Fulgosio\",\n                   \"Germán\",\"Glocester\",\"Restituto\",\n                   \"señor Infanzón\", \"el Infanzón\",\n                   \"Iriarte\",\"Joaquinito\",\"Juanito\",\n                   \"Leando\",\"Maroto\",\"marqués de Vegallana\",\n                   \"\\\\s{1}[M]arqués\\\\b\",\"Martínez\",\n                   \"Matías\",\"Matiella\",\"monaguillo\",\n                   \"señor Orgaz\",\"\\\\b[P]alma\\\\b\",\n                   \"Paco\",\"Paquito\",\"Palomo\",\n                   \"Rodríguez\",\"Parcerisa\",\"Pedro\",\n                   \"\\\\b[P]erales\\\\b\",\"Pinón\",\n                   \"Pompeyo\",\"Pompeyo Guimarán\",\"Guimarán\",\n                   \"Robustiano\",\"señor Roque\",\n                   \"Rosendo\",\"don Santos\",\"Sousa\",\n                   \"Trifón\",\"\\\\b[V]inagre\\\\b\",\n                   \"Vinculete\")\n           ),\n    mujeres=\n      list(\n        Ana=c(\"Ana\",\"Anita\",\"Regenta\"),\n        Obdulia=c(\"Obdulia\",\"Obdulia Fandiño\",\n                  \"Fandiño\",\"Obdulita\"),\n        Otras=c(\n                \"Agapita\",\"Águeda\",\"Angelina\",\n                \"Anuncita\",\"doña Anuncia\",\"Camila\",\n                \"Carolina\",\"Señora de Infanzón\", \"la Infanzón\",\n                \"Celestina\",\"Edelmira\",\"Emma\",\n                \"Fabiolita\",\"Fulgencia\",\"Gertrudis\",\n                \"la González\",\"Juana\",\"Lola\",\n                \"doña Lucía\",\"marquesa\",\"Rufina\",\n                \"Olvido\",\"doña Paula\",\"Pepa\",\n                \"Guimarán, Perpétua\",\"\\\\b[P]ilar\\\\b\",\n                \"Petra\",\"doña Petronila\",\"Ramona\",\n                \"\\\\bRita\\\\b\",\"\\\\bRosa\\\\b\",\"Rosita\",\n                \"Rudesinda\",\"Servanda\",\"Társila\",\n                \"\\\\b[T]eresa\\\\b\",\"Teresina\",\n                \"Úrsula\",\"Visitación\",\"\\\\b[V]isita\\\\b\",\n                \"viuda del marqués de Corujedo\")\n        )\n  )\n)\n\n\n\nComo se puede observar, se tratan de muchos personajes, algunos de ellos con varios nombres o formas de denominación. Una vez que ya tenemos el diccionario en manos, podemos proceder a contar la frecuencia de aparición de los personajes en la novela.\nPara añadir emoción al asunto, vamos a hacerlo por capítulo. De esa manera, seremos capaces de acompañar la evolución de los personajes a lo largo de la novela, su participación en cada etapa y su rol en la estructura.\n\n\nCode\n# cuenta la frecuencia de los personajes\n# en la novela por capítulo\nxp &lt;- countKeywords(cp, \n                    dich, \n                    rel.freq = F, \n                    group.var = \"capitulo\",\n                    quietly = TRUE)\n\n# Agrega los resultados por los dos niveles\n# de código del diccionario\nxx &lt;- aggregate(list(frequency=xp$frequency), \n                by=list(groups=xp$groups, \n                        level1=xp$level2), \n                sum, na.rm=T)\n\n# Elimina los términos no encontrados\n# en el corpus\nxx &lt;- xx[xx$frequency&gt;0,]\n\n# Ordena por capítulo\nxx &lt;- xx[order(xx$groups),]\n\n# Muestra los resultados\nreactable(xx, resizable=TRUE)\n\n\n\n\n\n\n\n\nPodemos ver cómo Ana ni siempre es la que más aparece asociada a otros en la novela. En algunos capítulos Fermín o Álvaro toman la delantera, mientras que en otros pasajes el protagonismo es más coral, con varios personajes siendo mencionados simultáneamente.\nComo en el ejemplo anterior, también podemos emplear técnicas de visualización de datos para representar la información de manera más clara y atractiva. No obstante, ahora disponemos de una información adicional -el capítulo-, de modo que la información está más detallada y requiere otros enfoques para su representación gráfica.\nUna primera alternativa consiste en emplear un diagrama de Sankey, que nos permitirá visualizar la relación entre los personajes y los capítulos. Se trata de un diagrama de flujo en el que los nodos representan las entidades y las conexiones entre ellos las relaciones. En este caso, los nodos serán los personajes y los capítulos, y las conexiones las apariciones de los personajes en los capítulos.\nLa función plotSankey de tenet nos permite hacerlo de manera sencilla. solo tenemos que indicarle los datos, el nodo de origen (“from=”), el nodo de destino (“to=”) y el valor (“value=”) que queremos representar.\n\n\nCode\nplotSankey(xx, \n           from = \"level1\", \n           to=\"groups\", \n           value = \"frequency\", \n           opacity = 0.05)\n\n\n\n\n\n\n\nLos resultados son reveladores. Aunque Ana es el personaje que más aparece en la novela, su presencia no es constante a lo largo de los capítulos. En algunos de ellos, como el 8 o el 22, aparece de modo tímido. Esta tendencia resulta aún más acentuada en el caso de los demás personajes.\nAunque el diagrama de Sankey es una buena opción, posee una limitación clara: solo permite visualizar los datos de un personaje o un capítulo a la vez. Para superar dicha restricción, podemos emplear un diagrama de flujo (streamgraph) que nos permita visualizar la evolución de todos los personajes a lo largo de los capítulos.\nLo haremos con la función plotStream de tenet. Al igual que en el caso anterior, solo tenemos que indicarle los datos, el nodo de origen (“x=”), el nodo de destino (“y=”) y el grupo (“group=”). También podemos elegir la paleta de colores que queremos emplear (“palette=”).\n\n\nCode\nplotStream(xx, \n           x=\"groups\",\n           y=\"frequency\", \n           group=\"level1\",\n           palette=pal$cat.ggsci.simpsons.16)\n\n\n\n\n\n\n\nEn este último gráfico queda más clara la evolución de los personajes en la novela y los momentos en los que el autor decide vincularles más o menos en su narrativa. Además, al pasar el cursor sobre un capítulo, podemos ver la frecuencia de aparición de todos y cada uno de los personajes en ese capítulo en concreto.\n\n\nAsociación entre temas (y personajes)\nHasta ahora hemos analizado la frecuencia de aparición de los personajes en la novela y cómo esta varía a lo largo de los capítulos. No obstante, también podemos estudiar la relación que los temas desarrollan entre sí. ¿Hasta qué punto dos ideas o conceptos aparecen en el mismo párrafo o capítulo del libro? Por ejemplo, ¿cuál es la relación entre iglesia y misticismo o entre sentimientos y el tiempo?\nPara responder a estas preguntas, vamos a emplear la función matchCodes de tenet. Esta función nos permite calcular la frecuencia en la que dos códigos del mismo diccionario aparecen juntos en cada frase, párrafo, capítulo o otra unidad de agregación del corpus.\n\n\nCode\n# Reorganiza el corpus según\n# sentencias o frases\ncs &lt;- corpus_reshape(cp, \"sentences\")\n\n# Calcula la frecuencia en la\n# que dos codigos del mismo \n# diccionario aparecen juntos\n# en cada frase\nd1 &lt;- matchCodes(cs, \n                dic, \n                level = 1, \n                quietly=TRUE)\n\n# Ordena los resultados de mayor a menor\nd1 &lt;- d1[order(d1$value, decreasing = T),]\n\n# Muestra los resultados\nplotChord(d1, \n          from = \"term1\", \n          to =\"term2\", \n          value= \"value\")\n\n\n\n\n\n\n\nComo vemos, los conceptos se encuentran muy relacionados entre sí. No resulta nada sorprendente que haya una alta frecuencia de aparición de “misticismo” en las mismas frases en las que aparece “iglesia” o “religión”. De igual modo, la relación entre “sentimientos” y “tiempo” es muy estrecha, lo que sugiere que el autor emplea el tiempo como un recurso narrativo para expresar los sentimientos de los personajes. La sociedad, curiosamente, parece tener la misma predilección por el “misticismo” y el “adulterio”.\nEsta estrategia se puede hacer más compleja si se emplean más categorías o si combinamos personajes y temas en un mismo diccionario. Cabe a cada uno determinar cuál es la perspectiva que resulta más fructífera para llevar a cabo el análisis. Las posibilidades son muy amplias y permiten una gran maleabilidad.\nPodemos repetir el mismo análisis con los personajes. ¿Qué personajes se relacionan más entre sí? ¿Cuáles son los personajes que presentan más vínculos con los demás? ¿Existe algún tipo de liderazgo o influencia entre ellos? Volvemos a aplicar el mismo método, pero ahora con un diccionario de personajes más detallado, sin agregar en una categoría “otros y otras”.\nEl primer paso consiste en crear un diccionario con todos los personajes sin agregar.\n\n\nCode\n# diccionario de personajes\n# sin agregar en una categoría\n# otros y otras\ndic.per &lt;- dictionary(\n  list(\n    hombres=\n      list(\n        Alvaro=c(\"Álvaro Mesía\",\n                 \"Álvaro\",\n                 \"Mesía\",\n                 \"presidente del casino\"),\n        Saturnino=c(\"Saturnino Bermúdez\",\n                    \"Saturnino\",\n                    \"Bermúdez\",\n                    \"Saturno\",\n                    \"Saturnillo\"),\n        Fermin=c(\"Magistral\",\n                 \"Provisor\",\n                 \"Fermín\",\n                 \"De Pas\",\n                 \"Fermín de Pas\",\n                 \"Magistral\"),\n        Victor=c(\"Víctor\",\n                 \"Víctor Quintanar\",\n                 \"Quintanar\"),\n        Agustinito=\"Agustinito\",\n        Amadeo=\"Amadeo\",\n        Anacleto=\"Anacleto\",\n        Anselmo=\"Anselmo\",\n        Antero=\"Antero\",\n        Antón=\"Antón Raíces\",\n        Antonio=\"Antonio\",\n        Barcaza=\"Barcaza\",\n        Basilio=\"Basilio\",\n        Bautista=\"Bautista\",\n        Bedoya=\"Bedoya\",\n        Belisario=\"Belisario\",\n        Benítez=\"Benítez\",\n        Bismark=\"Bismark\",\n        Campillo=c(\"Campillo\",\"\\\\b[C]hato\\\\b\"),\n        Carlos=\"Carlos\",\n        Pelaez=\"Peláez\",\n        Ripamilan=c(\"Cayetano\",\n                    \"Cayetano Ripamilán\",\n                    \"Ripamilán\"),\n        Celedonio=\"Celedonio\",\n        Colás=\"Colás\",\n        Corujedo=\"marqués de Corujedo\",\n        Frígilis=c(\"Frígilis\",\"Crespo\"),\n        Custodio=c(\"Custodio\"),\n        Cuervo=c(\"Olías de Cuervo\",\"señor Cuervo\"),\n        Diego=\"Diego\",\n        Escosura=\"Escosura\",\n        Estudiante=c(\"\\\\b[E]studiante\\\\b\",\"Pepe\",\"Trabuco\"),\n        Foja=\"Foja\",\n        Fortunato=\"Fortunato\",\n        \"Francisco de Asís\"=\"Francisco de Asís\",\n        \"Francisco de Pas\"=\"Francisco de Pas\",\n        \"Francisco de Osuma\"=\"Francisco de Osuna\",\n        Páez=c(\"Francisco Páez\", \"señor Páez\", \"señor de Páez\"),\n        \"Francisco Carraspique\"=\"Francisco Carraspique\",\n        Froilán=\"Froilán\",\n        Frutos=c(\"don Frutos\",\"Frutos Redondo\"),\n        Fulgosio=\"Fulgosio\",\n        Germán=\"Germán\",\n        Glocester=c(\"Glocester\",\"Restituto\"),\n        Infanzón=c(\"señor Infanzón\", \"el Infanzón\"),\n        Iriarte=\"Iriarte\",\n        Joaquinito=\"Joaquinito\",\n        Juanito=\"Juanito\",\n        Leandro=\"Leando\",\n        Maroto=\"Maroto\",\n        Vegallana=c(\"marqués de Vegallana\",\"\\\\s{1}[M]arqués\\\\b\"),\n        Martínez=\"Martínez\",\n        Matías=\"Matías\",\n        Matiella=\"Matiella\",\n        monaguillo=\"monaguillo\",\n        \"señor Orgaz\"=\"señor Orgaz\",\n        Palma=\"\\\\b[P]alma\\\\b\",\n        Paquito=c(\"Paco\",\"Paquito\"),\n        Palomo=c(\"Palomo\",\"Rodríguez\"),\n        Parcerisa=\"Parcerisa\",\n        Pedro=\"Pedro\",\n        Perales=\"\\\\b[P]erales\\\\b\",\n        Pinón=\"Pinón\",\n        Pompeyo=c(\"Pompeyo\",\"Pompeyo Guimarán\",\"Guimarán\"),\n        Robustiano=\"Robustiano\",\n        Roque=\"señor Roque\",\n        Rosendo=\"Rosendo\",\n        Santos=\"don Santos\",\n        Sousa=\"Sousa\",\n        Trifón=\"Trifón\",\n        Vinagre=\"\\\\b[V]inagre\\\\b\",\n        Vinculete=\"Vinculete\"\n        ),\n    mujeres=\n      list(\n        Ana=c(\"Ana\",\n              \"Anita\",\n              \"Regenta\"),\n        Obdulia=c(\"Obdulia\",\n                  \"Obdulia Fandiño\",\n                  \"Fandiño\",\n                  \"Obdulita\"),\n        Agapita=\"Agapita\",\n        Águeda=\"Águeda\",\n        Angelina=\"Angelina\",\n        Anunciación=c(\"Anuncita\",\"doña Anuncia\"),\n        Camila=\"Camila\",\n        Carolina=c(\"Carolina\",\"Señora de Infanzón\", \"la Infanzón\"),\n        Celestina=\"Celestina\",\n        Edelmira=\"Edelmira\",\n        Emma=\"Emma\",\n        Fabiolita=\"Fabiolita\",\n        Fulgencia=\"Fulgencia\",\n        Gertrudis=\"Gertrudis\",\n        \"La González\"=\"la González\",\n        Juana=\"Juana\",\n        Lola=\"Lola\",\n        Lucía=\"doña Lucía\",\n        Marquesa=c(\"marquesa\",\"Rufina\"),\n        Olvido=\"Olvido\",\n        Paula=\"doña Paula\",\n        Pepa=\"Pepa\",\n        Perpétua=\"Guimarán, Perpétua\",\n        Pilar=\"\\\\b[P]ilar\\\\b\",\n        Petra=\"Petra\",\n        Petrolina=\"doña Petronila\",\n        Ramona=\"Ramona\",\n        Rita=\"\\\\bRita\\\\b\",\n        Rosa=\"\\\\bRosa\\\\b\",\n        Rosita=\"Rosita\",\n        Rudesinda=\"Rudesinda\",\n        Servanda=\"Servanda\",\n        Társila=\"Társila\",\n        Teresa=\"\\\\b[T]eresa\\\\b\",\n        Teresina=\"Teresina\",\n        Úrsula=\"Úrsula\",\n        Visita=c(\"Visitación\",\"\\\\b[V]isita\\\\b\"),\n        \"Viuda de Corujedo\"=\"viuda del marqués de Corujedo\"\n        )\n  )\n)\n\n\n\nUna vez que se ha definido el diccionario, se procede a cargar el corpus y a calcular las asociaciones entre los códigos del diccionario. Para ello, se emplea la función matchCodes() del paquete tenet. Esta función calcula la frecuencia en la que dos códigos del mismo diccionario aparecen juntos en cada párrafo.\nPara facilitar el análisis de asociaciones entre personajes, hemos decidido eliminar las asociaciones con el código Ana. Resulta obvio que La Regenta es el personaje principal de la novela y, por tanto, aparecerá en la mayoría de los párrafos. Al eliminar esta constante, nuevos patrones emergen y posibilitan enriquecer el análisis. A continuación, se presenta el código que permite realizar este cálculo:\n\n\nCode\n# Emplea el corpus organizado\n# según párrafos\ncpp &lt;- corpus(regp, \n              text_field = \"texto\")\n\n# Calcula la frecuencia en la\n# que dos códigos del mismo \n# diccionario aparecen juntos\n# en cada párrafo\nd1 &lt;- matchCodes(cpp, \n                 dic.per, \n                 level = 2, \n                 quietly=TRUE)\n\n# Ordena los resultados de mayor a menor\nd1 &lt;- d1[order(d1$value, decreasing = T),]\n\n# Elimina las asociaciones con Ana\nd1 &lt;- d1[d1$term1!=\"Ana\",]\nd1 &lt;- d1[d1$term2!=\"Ana\",]\n\n# Genera un gráfico de cuerdas\n# para visualizar las asociaciones\nplotChord(d1, \n          from = \"term1\", \n          to =\"term2\", \n          value= \"value\", \n          elementId = \"chord3\")\n\n\n\n\n\n\n\nEl gráfico de cuerdas muestra la centralidad de Fermín y Álvaro, que presentan vínculos con un abanico amplio de personajes. Los demás, se enmarcan en relaciones más específicas y limitadas. Petra, por ejemplo, actúa como intermediaria entre Ana y sus admiradores y esta “función” queda patente en sus conexiones con Fermín, Álvaro y Víctor (que en ese caso es su patrón).\nAdemás, la importancia de los personajes puede variar según cada capítulo. Por ejemplo, en el capítulo 4, donde se describe la infancia de Ana, aparecen personajes como Camila, Carlos y Germán, que, luego, apenas vuelven a ser mencionados. Por eso, sería interesante analizar cómo la red de asociación entre personajes varía según el capítulo.\nEl siguiente código genera una visualización de red para cada capítulo que muestra la frecuencia en que los personajes aparecen juntos en los mismos párrafos. Hemos elegido eliminar a Ana por dos motivos. Primero, para facilitar la visualización, puesto que se trata del personaje principal y que aparece relacionada a casi todos los demás. Segundo, y más importante, su ausencia nos permite observar las relaciones entre los demás personajes, que de otro modo quedarían opacadas por la presencia de Ana. Por ejemplo, de ese modo podemos ver mejor cuándo Fermín y Álvaro toman el centro de la narración o cuando otros personajes interesantes, como la marquesa, se destacan.\n\n\nCode\n# Carga los paquetes necesarios\nlibrary(network)\nlibrary(sna)\nlibrary(ggnetwork)\nlibrary(ggplot2)\n\n# Crea una lista para guardar\n# los gráficos de red\n# de cada capítulo\npx &lt;- list()\n\n# Para cada capítulo\nfor(i in 1:30){\n\n  # Extrae el texto del capítulo\n  c1 &lt;- cp[i]\n  \n  # Reorganiza en párrafos\n  c1 &lt;- corpus_reshape(c1, to=\"paragraphs\")\n  \n  # Calcula la frecuencia de los\n  # personajes\n  d1 &lt;- matchCodes(c1, \n                   dic.per, \n                   level = 2, \n                   quietly=TRUE)\n  \n  # Elimina a Ana para facilitar\n  # la visualización\n  d1 &lt;- d1[d1$term1!=\"Ana\",]\n  d1 &lt;- d1[d1$term2!=\"Ana\",]\n\n  # Ordena los resultados\n  d1 &lt;- d1[order(d1$value, decreasing = T),]\n\n  # Crea una red\n  n1 &lt;- network(d1, \n                directed = F)\n  \n  # Convierte en un layout\n  # de red para la visualización\n  gn &lt;- ggnetwork(n1, \n                  layout = \"kamadakawai\", \n                  cell.jitter = 0.75)\n\n  # Genera el gráfico\n  p &lt;- ggplot(gn, \n              aes(x = x, \n                  y = y, \n                  xend = xend, \n                  yend = yend)) +\n          geom_edges(\n                color = \"grey90\",\n                aes(size=value), \n                curvature=0.25) +\n        geom_edges(\n                size=0.1, \n                curvature=0.25, \n                color=\"purple\") +\n          geom_nodetext(\n                aes(label = vertex.names),\n                fontface = \"bold\")+\n          theme_blank()+\n          labs(title=paste0(\"**Capítulo \",i,\"**\"))+\n          theme(plot.title = \n                  ggtext::element_markdown(\n                          size=15, \n                          color=\"darkgreen\"), \n                legend.position = \"none\",\n                plot.margin=grid::unit(\n                  c(0.75,0.75,0.75,0.75), \n                  \"cm\"))\n\n  # Almacena el gráfico en\n  # la lista\n  px[[i]] &lt;- p\n\n}\n\n# Carga el paquete que\n# permitirá visualizar\n# las 30 redes en un\n# solo gráfico\nlibrary(egg)\n\n# Organiza los gráficos\n# en tres columnas y diez\n# filas\nggarrange(plots=px, \n          ncol=3, \n          nrow=10)\n\n\n\n\n\nLa figura nos muestra que cada capítulo presenta un patrón distinto de interacción entre los personajes. La complejidad de las redes también varía de modo considerable. En algunos casos, como los capítulos 4 y 7, la red es muy simple, con pocos personajes y pocas conexiones. En otros, como el capítulo 13, la red es mucho más densa y compleja. En general, Fermín y Álvaro son los personajes más centrales, pero no siempre. En algunos capítulos, otros personajes, como la marquesa, toman el centro de la narración."
  },
  {
    "objectID": "regenta.html#footnotes",
    "href": "regenta.html#footnotes",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNo nos detendremos aquí en explicar los detalles del cálculo de los indicadores. Cada técnica suele estar asociada a un artículo o referencia de ayuda que aclara el algoritmo. Para saber más sobre la función textstat_collocations, puedes consultar la ayuda en R ejecutando el comando help(textstat_collocations) de la consola de R.↩︎"
  },
  {
    "objectID": "regenta.html#clusters-y-escalonado-de-textos",
    "href": "regenta.html#clusters-y-escalonado-de-textos",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Clusters y escalonado de textos",
    "text": "Clusters y escalonado de textos\n\nAnálisis de conglomerados (clusters)\nEl análisis de conglomerados es una técnica que permite agrupar textos en función de su similitud. En el ejemplo abajo, se utiliza un algoritmo de agrupamiento jerárquico para agrupar los capítulos de la novela en función de la similitud de sus palabras. La similitud se mide a partir de la distancia euclidiana entre ellos.\n\n\nCode\n# Crea los tokens\ntk &lt;- tokens(cp, \n             remove_punct = T, \n             remove_numbers = T, \n             remove_separators = T, \n             remove_symbols = T)\n\n# Remueve las palabras vacías\ntk &lt;- tokens_remove(tk, \n                    pattern=stopwords(\"es\"))\n\n# Crea la matriz de frecuencias\ndtm &lt;- dfm(tk)\n\n# Carga el paquete necesario\nlibrary(quanteda.textstats)\n\n# Calcula la distancia entre \n# los capítulos y los agrupa en\n# conglomerados\ntstat_dist &lt;- as.dist(textstat_dist(dtm))\nclust &lt;- hclust(tstat_dist)\n\n# Muestra los resultados\nplot(clust, xlab = \"Distance\", ylab = NULL)\n\n\n\n\n\n\nEl dendrograma representa una forma de representación visual de las distancias entre los capítulos. Vemos existe un gran grupo de capítulos (con sus subgrupos) y dos conglomerados más pequeños. Uno, formado por los capítulos 12, 13, 16, 20, 21 y 22 y, otro, por el 29 y 30.\nRevisar el contenido de los capítulos para interpretar los resultados.\n\n\nEscalonado unidimensional de textos: Wordfish\nEl escalonado de textos es una técnica que permite visualizar la relación entre textos en un espacio unidimensional. La técnica empleada en este caso es el Wordfish (Slapin and Proksch 2008). Se trata de una técnica de estimación de puntos ideales a partir de modelos estadísticos que parten de las frecuencias de las palabras. En este caso, hemos aplicado el escalonado de textos a los capítulos de La Regenta para ver cómo se relacionan entre sí.\n\n\nCode\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(ggplot2)\n\nwf &lt;- textmodel_wordfish(dtm)\n\ntextplot_scale1d(wf) +\n  geom_hline(yintercept = 0, \n             linetype = \"dashed\",\n             color=\"red3\")\n\n\n\n\n\nEsta escala se podría interpretar de distintas maneras. Una de ellas es que los capítulos situados más a la izquierda representan una mayor intensidad de la vida social de Vetusta, mientras que aquellos más a la derecha se relacionan con la vida privada, íntima y la infancia de La Regenta.\nTambién podríamos leer los resultados de acuerdo con el protagonismo o mayor centralidad de ciertos personajes según el punto de la escala. Más a la izquierda predominan los Marqueses, Álvaro Mesía (antes de su relación con Ana Ozores) y la sociedad vetustense. En el centro se sitúa Fermín de Pas, que se interpone entre la vida privada de Ana y la vida en sociedad. En la derecha encontramos a Víctor, su esposo, Álvaro (hechos consumados) y en el extremo, la familia de Ana, especialmente en su infancia.\nDe todas formas, ambas interpretaciones sugieren una dualidad entre la vida íntima y relativamente reservada de Ana en contraste con la vida social y pública de Vetusta. Los dos mundos se tocan en ocasiones concretas por intermedio de algunos actores que transitan dentre ellos, como Fermín de Pas o Álvaro Mesía.\n\n\nAnálisis de correspondencia (CA)\nEl análisis de correspondencia es una técnica que permite visualizar la relación entre variables categóricas en un espacio bidimensional. En este caso, hemos aplicado el análisis de correspondencia a los personajes y los capítulos de La Regenta para ver cómo se relacionan entre sí.\n\n\nAnálisis de componentes principales (PCA)\naa"
  },
  {
    "objectID": "sombreros.html#redes-de-diálogo",
    "href": "sombreros.html#redes-de-diálogo",
    "title": "Tres sombreros de copaAnálisis de redes de diálogo en R",
    "section": "Redes de diálogo",
    "text": "Redes de diálogo\n\n\nCode\n# carga los datos de la obra\nload(\"../textos/Tres_sombreros_de_copa.RData\")"
  },
  {
    "objectID": "regenta.html#clusters-análisis-de-correspondencia-y-escalonado-de-textos",
    "href": "regenta.html#clusters-análisis-de-correspondencia-y-escalonado-de-textos",
    "title": "La RegentaAnálisis de la novela en R",
    "section": "Clusters, Análisis de correspondencia y escalonado de textos",
    "text": "Clusters, Análisis de correspondencia y escalonado de textos\n\nAnálisis de conglomerados (clusters)\n\n\nCode\ntk &lt;- tokens(cp, \n             remove_punct = T, \n             remove_numbers = T, \n             remove_separators = T, \n             remove_symbols = T)\n\ntk &lt;- tokens_remove(tk, \n                    pattern=stopwords(\"es\"))\n\ndtm &lt;- dfm(tk)\n\nlibrary(quanteda.textstats)\n\ntstat_dist &lt;- as.dist(textstat_dist(dtm))\nclust &lt;- hclust(tstat_dist)\n\nplot(clust, xlab = \"Distance\", ylab = NULL)\n\n\n\n\n\n\n\nEscalonado de textos: Wordfish\n\n\nCode\nlibrary(quanteda.textmodels)\nlibrary(quanteda.textplots)\nlibrary(ggplot2)\n\nwf &lt;- textmodel_wordfish(dtm)\n\ntextplot_scale1d(wf) +\n  geom_hline(yintercept = 0, \n             linetype = \"dashed\",\n             color=\"red3\")\n\n\n\n\n\nEsta escala se podría interpretar de distintas maneras. Una de ellas es que los capítulos situados más a la izquierda representan una mayor intensidad de la vida social de Vetusta, mientras que aquellos más a la derecha se relacionan con la vida privada, íntima y la infancia de La Regenta.\nTambién podríamos leer los resultados de acuerdo con el protagonismo o mayor centralidad de ciertos personajes según el punto de la escala. Más a la izquierda predominan los Marqueses, Álvaro Mesía (antes de su relación con Ana Ozores) y la sociedad vetustense. En el centro se sitúa Fermín de Pas, que se interpone entre la vida privada de Ana y la vida en sociedad. En la derecha encontramos a Víctor, su esposo, Álvaro (hechos consumados) y en el extremo, la familia de Ana, especialmente en su infancia.\nDe todas formas, ambas interpretaciones sugieren una dualidad entre la vida íntima y relativamente reservada de Ana en contraste con la vida social y pública de Vetusta. Los dos mundos se tocan en ocasiones concretas por intermedio de algunos actores que transitan dentre ellos, como Fermín de Pas o Álvaro Mesía."
  }
]